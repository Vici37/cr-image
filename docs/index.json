{"repository_name":"cr-image","body":"# Crystal Image (Processing)\n\nThis shard aims to provide feature rich image processing abilities, both for the purpose of\nimage manipulation as well as feature / information extraction from those images.\n\nThe code here takes imense inspiration from [Pluto](https://github.com/phenopolis/pluto) and [Stumpy](https://github.com/stumpycr/stumpy_core), with\nan eventual goal to be able to convert between images of this and those libraries.\n\nAll sample images used are from [Unsplash](https://unsplash.com/).\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     cr-image:\n       github: vici37/cr-image\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nAssuming an image `moon.jpg` already exists\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/moon.jpg\" alt=\"Picture of moon\"/>\n\n```crystal\nrequire \"cr-image\"\n\nimage = CrImage::RGBAImage.open(\"moon.jpg\")\n\n# create a mask identifying all pixels with light (i.e. the moon)\nmoon_mask = image\n  .to_gray\n  .threshold(8) # pixels are UInt8, with 0 as black and 255 as white\n\n# Crop out the moon from the image, and save it to a new file\nimage.crop(\n  moon_mask.region # smallest area that encompasses all true bits in mask\n).save(\"moon_cropped.jpg\")\n\n```\n\nYields this image:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/moon_cropped.jpg\" alt=\"Cropped example of moon\"/>\n\n[See documentation](http://troy.sornson.io/cr-image/) for more examples.\n\n## Development\n\nThis requires `libwebp`, `libspng`, and `libturbojpeg` to run. Then:\n\n```\n> make test\n```\n\nTo ensure all tests run and pass.\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/cr-image/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Troy Sornson](https://github.com/Vici37) - creator and maintainer\n","program":{"html_id":"cr-image/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"cr-image","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"cr-image/CrImage","path":"CrImage.html","kind":"module","full_name":"CrImage","name":"CrImage","abstract":false,"locations":[{"filename":"src/cr-image/channel_type.cr","line_number":4,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/channel_type.cr#L4"},{"filename":"src/cr-image/region.cr","line_number":1,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/region.cr#L1"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"types":[{"html_id":"cr-image/CrImage/ChannelType","path":"CrImage/ChannelType.html","kind":"enum","full_name":"CrImage::ChannelType","name":"ChannelType","abstract":false,"ancestors":[{"html_id":"cr-image/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"cr-image/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"cr-image/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cr-image/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-image/channel_type.cr","line_number":4,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/channel_type.cr#L4"}],"repository_name":"cr-image","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Red","name":"Red","value":"0"},{"id":"Green","name":"Green","value":"1"},{"id":"Blue","name":"Blue","value":"2"},{"id":"Gray","name":"Gray","value":"3"},{"id":"Alpha","name":"Alpha","value":"4"}],"namespace":{"html_id":"cr-image/CrImage","kind":"module","full_name":"CrImage","name":"CrImage"},"doc":"Enum representing different image channels supported by CrImage\n\nSee `RGBAImage#each_channel` and `GrayscaleImage#each_channel`","summary":"<p>Enum representing different image channels supported by CrImage</p>","instance_methods":[{"html_id":"alpha?-instance-method","name":"alpha?","abstract":false,"location":{"filename":"src/cr-image/channel_type.cr","line_number":9,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/channel_type.cr#L9"},"def":{"name":"alpha?","visibility":"Public","body":"self == Alpha"}},{"html_id":"blue?-instance-method","name":"blue?","abstract":false,"location":{"filename":"src/cr-image/channel_type.cr","line_number":7,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/channel_type.cr#L7"},"def":{"name":"blue?","visibility":"Public","body":"self == Blue"}},{"html_id":"gray?-instance-method","name":"gray?","abstract":false,"location":{"filename":"src/cr-image/channel_type.cr","line_number":8,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/channel_type.cr#L8"},"def":{"name":"gray?","visibility":"Public","body":"self == Gray"}},{"html_id":"green?-instance-method","name":"green?","abstract":false,"location":{"filename":"src/cr-image/channel_type.cr","line_number":6,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/channel_type.cr#L6"},"def":{"name":"green?","visibility":"Public","body":"self == Green"}},{"html_id":"red?-instance-method","name":"red?","abstract":false,"location":{"filename":"src/cr-image/channel_type.cr","line_number":5,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/channel_type.cr#L5"},"def":{"name":"red?","visibility":"Public","body":"self == Red"}}]},{"html_id":"cr-image/CrImage/Color","path":"CrImage/Color.html","kind":"class","full_name":"CrImage::Color","name":"Color","abstract":false,"superclass":{"html_id":"cr-image/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cr-image/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cr-image/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-image/color.cr","line_number":5,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/color.cr#L5"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cr-image/CrImage","kind":"module","full_name":"CrImage","name":"CrImage"},"doc":"Utility class for parsing and representing colors that can be used for certain\nmethods in CrImage.\n\nSee `Operation::MaskApply#apply_color`, `Operation::Draw#draw_box`, or `Operation::Draw#draw_circle`","summary":"<p>Utility class for parsing and representing colors that can be used for certain methods in CrImage.</p>","constructors":[{"html_id":"new(red:UInt8,green:UInt8,blue:UInt8,alpha:UInt8=255)-class-method","name":"new","abstract":false,"args":[{"name":"red","external_name":"red","restriction":"UInt8"},{"name":"green","external_name":"green","restriction":"UInt8"},{"name":"blue","external_name":"blue","restriction":"UInt8"},{"name":"alpha","default_value":"255","external_name":"alpha","restriction":"UInt8"}],"args_string":"(red : UInt8, green : UInt8, blue : UInt8, alpha : UInt8 = 255)","args_html":"(red : UInt8, green : UInt8, blue : UInt8, alpha : UInt8 = <span class=\"n\">255</span>)","location":{"filename":"src/cr-image/color.cr","line_number":8,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/color.cr#L8"},"def":{"name":"new","args":[{"name":"red","external_name":"red","restriction":"UInt8"},{"name":"green","external_name":"green","restriction":"UInt8"},{"name":"blue","external_name":"blue","restriction":"UInt8"},{"name":"alpha","default_value":"255","external_name":"alpha","restriction":"UInt8"}],"visibility":"Public","body":"_ = allocate\n_.initialize(red, green, blue, alpha)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"of(color:String):Color-class-method","name":"of","doc":"Parse color from a hex string:\n\n```\nColor.of(\"#1\")        # same as \"#11\" => Color.new(17, 17, 17, 255)\nColor.of(\"#01\")       # => Color.new(1, 1, 1, 255)\nColor.of(\"#123\")      # same as \"#112233\" => Color.new(17, 34, 51, 255)\nColor.of(\"#1234\")     # same as \"#11223344\" => Color.new(34, 51, 68, 17)\nColor.of(\"#010203\")   # => Color.new(1, 2, 3, 255)\nColor.of(\"#01020304\") # => Color.new(2, 3, 4, 1)\n```","summary":"<p>Parse color from a hex string:</p>","abstract":false,"args":[{"name":"color","external_name":"color","restriction":"String"}],"args_string":"(color : String) : Color","args_html":"(color : String) : <a href=\"../CrImage/Color.html\">Color</a>","location":{"filename":"src/cr-image/color.cr","line_number":45,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/color.cr#L45"},"def":{"name":"of","args":[{"name":"color","external_name":"color","restriction":"String"}],"return_type":"Color","visibility":"Public","body":"if ((!(color.starts_with?(\"#\"))) || (!({2, 3, 4, 5, 7, 9}.includes?(color.size)))) || (color.match(/^#[^0-9a-f]/i))\n  raise(\"Invalid hex color '#{color}': must start with '#' followed by 1, 2, 3, 4, 6, or 9 alphanumeric characters (0-9 or a-f)\")\nend\ncase color.size\nwhen 2\n  gray = (color[1].to_i(16)).to_u8\n  gray = (gray << 4) + gray\n  self.new(gray, gray, gray)\nwhen 3\n  gray = (color[1, 2].to_i(16)).to_u8\n  self.new(gray, gray, gray)\nwhen 4\n  red = (color[1].to_i(16)).to_u8\n  green = (color[2].to_i(16)).to_u8\n  blue = (color[3].to_i(16)).to_u8\n  self.new((red << 4) + red, (green << 4) + green, (blue << 4) + blue)\nwhen 5\n  alpha = (color[1].to_i(16)).to_u8\n  red = (color[2].to_i(16)).to_u8\n  green = (color[3].to_i(16)).to_u8\n  blue = (color[4].to_i(16)).to_u8\n  self.new((red << 4) + red, (green << 4) + green, (blue << 4) + blue, (alpha << 4) + alpha)\nwhen 7\n  red = (color[1, 2].to_i(16)).to_u8\n  green = (color[3, 2].to_i(16)).to_u8\n  blue = (color[5, 2].to_i(16)).to_u8\n  self.new(red, green, blue)\nelse\n  alpha = (color[1, 2].to_i(16)).to_u8\n  red = (color[3, 2].to_i(16)).to_u8\n  green = (color[5, 2].to_i(16)).to_u8\n  blue = (color[7, 2].to_i(16)).to_u8\n  self.new(red, green, blue, alpha)\nend\n"}},{"html_id":"random:Color-class-method","name":"random","doc":"Generate a random color with full (255) opacity","summary":"<p>Generate a random color with full (255) opacity</p>","abstract":false,"location":{"filename":"src/cr-image/color.cr","line_number":12,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/color.cr#L12"},"def":{"name":"random","return_type":"Color","visibility":"Public","body":"r = Random.new\nnew(r.rand(UInt8), r.rand(UInt8), r.rand(UInt8), 255_u8)\n"}}],"instance_methods":[{"html_id":"==(other:Color):Bool-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Color"}],"args_string":"(other : Color) : Bool","args_html":"(other : <a href=\"../CrImage/Color.html\">Color</a>) : Bool","location":{"filename":"src/cr-image/color.cr","line_number":89,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/color.cr#L89"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Color"}],"return_type":"Bool","visibility":"Public","body":"(((red == other.red) && (green == other.green)) && (blue == other.blue)) && (alpha == other.alpha)"}},{"html_id":"[](channel_type:ChannelType):UInt8-instance-method","name":"[]","doc":"Receive the UInt8 portion of this color corresponding to `channel_type`","summary":"<p>Receive the UInt8 portion of this color corresponding to <code>channel_type</code></p>","abstract":false,"args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"}],"args_string":"(channel_type : ChannelType) : UInt8","args_html":"(channel_type : <a href=\"../CrImage/ChannelType.html\">ChannelType</a>) : UInt8","location":{"filename":"src/cr-image/color.cr","line_number":25,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/color.cr#L25"},"def":{"name":"[]","args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"}],"return_type":"UInt8","visibility":"Public","body":"case channel_type\nin ChannelType::Red\n  red\nin ChannelType::Green\n  green\nin ChannelType::Blue\n  blue\nin ChannelType::Alpha\n  alpha\nin ChannelType::Gray\n  gray\nend"}},{"html_id":"alpha:UInt8-instance-method","name":"alpha","abstract":false,"location":{"filename":"src/cr-image/color.cr","line_number":6,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/color.cr#L6"},"def":{"name":"alpha","visibility":"Public","body":"@alpha"}},{"html_id":"blue:UInt8-instance-method","name":"blue","abstract":false,"location":{"filename":"src/cr-image/color.cr","line_number":6,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/color.cr#L6"},"def":{"name":"blue","visibility":"Public","body":"@blue"}},{"html_id":"gray(red_multiplier:Float=0.299,green_multiplier:Float=0.587,blue_multiplier:Float=0.114):UInt8-instance-method","name":"gray","doc":"Convert this Color to a single UInt8 gray value","summary":"<p>Convert this Color to a single UInt8 gray value</p>","abstract":false,"args":[{"name":"red_multiplier","default_value":"0.299","external_name":"red_multiplier","restriction":"Float"},{"name":"green_multiplier","default_value":"0.587","external_name":"green_multiplier","restriction":"Float"},{"name":"blue_multiplier","default_value":"0.114","external_name":"blue_multiplier","restriction":"Float"}],"args_string":"(red_multiplier : Float = 0.299, green_multiplier : Float = 0.587, blue_multiplier : Float = 0.114) : UInt8","args_html":"(red_multiplier : Float = <span class=\"n\">0.299</span>, green_multiplier : Float = <span class=\"n\">0.587</span>, blue_multiplier : Float = <span class=\"n\">0.114</span>) : UInt8","location":{"filename":"src/cr-image/color.cr","line_number":18,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/color.cr#L18"},"def":{"name":"gray","args":[{"name":"red_multiplier","default_value":"0.299","external_name":"red_multiplier","restriction":"Float"},{"name":"green_multiplier","default_value":"0.587","external_name":"green_multiplier","restriction":"Float"},{"name":"blue_multiplier","default_value":"0.114","external_name":"blue_multiplier","restriction":"Float"}],"return_type":"UInt8","visibility":"Public","body":"Math.min(255_u8, (((red * red_multiplier) + (blue * blue_multiplier)) + (green * green_multiplier)).to_u8)"}},{"html_id":"green:UInt8-instance-method","name":"green","abstract":false,"location":{"filename":"src/cr-image/color.cr","line_number":6,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/color.cr#L6"},"def":{"name":"green","visibility":"Public","body":"@green"}},{"html_id":"red:UInt8-instance-method","name":"red","abstract":false,"location":{"filename":"src/cr-image/color.cr","line_number":6,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/color.cr#L6"},"def":{"name":"red","visibility":"Public","body":"@red"}}]},{"html_id":"cr-image/CrImage/Exception","path":"CrImage/Exception.html","kind":"class","full_name":"CrImage::Exception","name":"Exception","abstract":false,"superclass":{"html_id":"cr-image/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"cr-image/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"cr-image/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cr-image/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-image/exception.cr","line_number":2,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/exception.cr#L2"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cr-image/CrImage","kind":"module","full_name":"CrImage","name":"CrImage"},"doc":"Exception class for any errors thrown by CrImage","summary":"<p>Exception class for any errors thrown by CrImage</p>","constructors":[{"html_id":"new(message:String)-class-method","name":"new","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/cr-image/exception.cr","line_number":5,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/exception.cr#L5"},"def":{"name":"new","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(error_code:Int32)-class-method","name":"new","abstract":false,"args":[{"name":"error_code","external_name":"error_code","restriction":"Int32"}],"args_string":"(error_code : Int32)","args_html":"(error_code : Int32)","location":{"filename":"src/cr-image/exception.cr","line_number":9,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/exception.cr#L9"},"def":{"name":"new","args":[{"name":"error_code","external_name":"error_code","restriction":"Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(error_code)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(handle:LibJPEGTurbo::Handle)-class-method","name":"new","abstract":false,"args":[{"name":"handle","external_name":"handle","restriction":"LibJPEGTurbo::Handle"}],"args_string":"(handle : LibJPEGTurbo::Handle)","args_html":"(handle : LibJPEGTurbo::Handle)","location":{"filename":"src/cr-image/exception.cr","line_number":13,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/exception.cr#L13"},"def":{"name":"new","args":[{"name":"handle","external_name":"handle","restriction":"LibJPEGTurbo::Handle"}],"visibility":"Public","body":"_ = allocate\n_.initialize(handle)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"error_code:Int32|Nil-instance-method","name":"error_code","abstract":false,"location":{"filename":"src/cr-image/exception.cr","line_number":3,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/exception.cr#L3"},"def":{"name":"error_code","return_type":"Int32 | ::Nil","visibility":"Public","body":"@error_code"}}]},{"html_id":"cr-image/CrImage/Format","path":"CrImage/Format.html","kind":"module","full_name":"CrImage::Format","name":"Format","abstract":false,"locations":[{"filename":"src/cr-image/format/jpeg.cr","line_number":15,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/format/jpeg.cr#L15"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cr-image/CrImage","kind":"module","full_name":"CrImage","name":"CrImage"},"types":[{"html_id":"cr-image/CrImage/Format/JPEG","path":"CrImage/Format/JPEG.html","kind":"module","full_name":"CrImage::Format::JPEG","name":"JPEG","abstract":false,"locations":[{"filename":"src/cr-image/format/jpeg.cr","line_number":15,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/format/jpeg.cr#L15"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Format","kind":"module","full_name":"CrImage::Format","name":"Format"},"doc":"Provides methods to read from and write to jpeg. Requires `libturbojpeg` to function.\n\n```\nimage = File.open(\"image.jpg\") { |file| CrImage::RGBAImage.from_jpeg(file) }\nFile.open(\"other_image.jpg\") { |file| image.to_jpeg(file) }\n```\nAlternatively, you can use the convenience methods in the `Open` and `Save` modules\nto acheive the same thing:\n```\nimage = CrImage::RGBAImage.open(\"image.jpg\")\nimage.save(\"other_image.jpg\")\n```","summary":"<p>Provides methods to read from and write to jpeg.</p>","instance_methods":[{"html_id":"to_jpeg(io:IO,quality:Int32=100):Nil-instance-method","name":"to_jpeg","doc":"Output the image as JPEG to `io`","summary":"<p>Output the image as JPEG to <code>io</code></p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"quality","default_value":"100","external_name":"quality","restriction":"Int32"}],"args_string":"(io : IO, quality : Int32 = 100) : Nil","args_html":"(io : IO, quality : Int32 = <span class=\"n\">100</span>) : Nil","location":{"filename":"src/cr-image/format/jpeg.cr","line_number":69,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/format/jpeg.cr#L69"},"def":{"name":"to_jpeg","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"quality","default_value":"100","external_name":"quality","restriction":"Int32"}],"return_type":"Nil","visibility":"Public","body":"handle = LibJPEGTurbo.init_compress\nimage_data = IO::Memory.new(size * 3)\nsize.times do |index|\n  image_data.write_byte(red.unsafe_fetch(index))\n  image_data.write_byte(green.unsafe_fetch(index))\n  image_data.write_byte(blue.unsafe_fetch(index))\nend\nbuffer = Pointer(UInt8).null\ncheck_jpeg(handle, LibJPEGTurbo.compress2(handle, image_data.buffer, @width, 0, @height, LibJPEGTurbo::PixelFormat::RGB, pointerof(buffer), out size, LibJPEGTurbo::Subsampling::S444, quality, 0))\ncheck_jpeg(handle, LibJPEGTurbo.destroy(handle))\nbytes = Bytes.new(buffer, size)\nio.write(bytes)\nLibJPEGTurbo.free(buffer)\n"}}]},{"html_id":"cr-image/CrImage/Format/Open","path":"CrImage/Format/Open.html","kind":"module","full_name":"CrImage::Format::Open","name":"Open","abstract":false,"locations":[{"filename":"src/cr-image/format/open.cr","line_number":12,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/format/open.cr#L12"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cr-image/CrImage/Format","kind":"module","full_name":"CrImage::Format","name":"Format"},"doc":"Provides a convenience method for opening up image files from the filesystem.\nCurrently supports:\n* PPM (`.ppm`)\n* WebP (`.webp`)\n* JPEG (`.jpeg`, `.jpg`)\n* PNG (`.png`)\n\n```\nimage = CrImage::RGBAImage.open(\"image.jpg\")\n```\nSee `Save` for a convenience method to write to the filesystem.","summary":"<p>Provides a convenience method for opening up image files from the filesystem.</p>","instance_methods":[{"html_id":"open(filename:String):self-instance-method","name":"open","doc":"Reads this image from file using the provided filename.","summary":"<p>Reads this image from file using the provided filename.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String"}],"args_string":"(filename : String) : self","args_html":"(filename : String) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/format/open.cr","line_number":14,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/format/open.cr#L14"},"def":{"name":"open","args":[{"name":"filename","external_name":"filename","restriction":"String"}],"return_type":"self","visibility":"Public","body":"case filename\nwhen .ends_with?(\".ppm\")\n  File.open(filename) do |f|\n    self.from_ppm(f)\n  end\nwhen .ends_with?(\".jpg\"), .ends_with?(\".jpeg\")\n  File.open(filename) do |f|\n    self.from_jpeg(f)\n  end\nwhen .ends_with?(\".webp\")\n  File.open(filename) do |f|\n    self.from_webp(f)\n  end\nwhen .ends_with?(\".png\")\n  File.open(filename) do |f|\n    self.from_png(f)\n  end\nelse\n  raise(\"Unknown file extension for filename #{filename}, only support .webp, .png, .ppm, .jpg, and .jpeg\")\nend"}}]},{"html_id":"cr-image/CrImage/Format/PNG","path":"CrImage/Format/PNG.html","kind":"module","full_name":"CrImage::Format::PNG","name":"PNG","abstract":false,"locations":[{"filename":"src/cr-image/format/png.cr","line_number":15,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/format/png.cr#L15"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Format","kind":"module","full_name":"CrImage::Format","name":"Format"},"doc":"Provides methods to read from and write to PNG. Requires `libspng` to function.\n\n```\nimage = File.open(\"image.png\") { |file| CrImage::RGBAImage.from_png(file) }\nFile.open(\"other_image.png\") { |file| image.to_png(file) }\n```\nAlternatively, you can use the convenience methods in the `Open` and `Save` modules\nto acheive the same thing:\n```\nimage = CrImage::RGBAImage.open(\"image.png\")\nimage.save(\"other_image.png\")\n```","summary":"<p>Provides methods to read from and write to PNG.</p>","instance_methods":[{"html_id":"to_png(io:IO):Nil-instance-method","name":"to_png","doc":"Output the image as PNG to `io`","summary":"<p>Output the image as PNG to <code>io</code></p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/cr-image/format/png.cr","line_number":70,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/format/png.cr#L70"},"def":{"name":"to_png","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"image_data = IO::Memory.new(size * 4)\nsize.times do |index|\n  image_data.write_byte(red.unsafe_fetch(index))\n  image_data.write_byte(green.unsafe_fetch(index))\n  image_data.write_byte(blue.unsafe_fetch(index))\n  image_data.write_byte(alpha.unsafe_fetch(index))\nend\nctx = LibSPNG.ctx_new(LibSPNG::CtxFlags::Encoder)\nif ctx\nelse\n  raise(::CrImage::Exception.new(\"Failed to create a context\"))\nend\nLibSPNG.set_option(ctx, LibSPNG::Option::EncodeToBuffer, true)\nLibSPNG.set_png_buffer(ctx, image_data.buffer, image_data.size)\nihdr = LibSPNG::IHDR.new\nihdr.width = @width\nihdr.height = @height\nihdr.color_type = LibSPNG::ColorType::TrueColorAlpha\nihdr.bit_depth = 8\nLibSPNG.set_ihdr(ctx, pointerof(ihdr))\nerror = LibSPNG.encode_image(ctx, image_data.buffer, image_data.size, LibSPNG::Format::PNG, LibSPNG::EncodeFlags::Finalize)\ncheck_png(error)\nbuffer = LibSPNG.get_png_buffer(ctx, out size, pointerof(error))\nif ctx\nelse\n  raise(::CrImage::Exception.new(\"Failed to get a buffer\"))\nend\nbytes = Bytes.new(buffer, size)\nio.write(bytes)\nLibC.free(buffer)\n"}}]},{"html_id":"cr-image/CrImage/Format/PPM","path":"CrImage/Format/PPM.html","kind":"module","full_name":"CrImage::Format::PPM","name":"PPM","abstract":false,"locations":[{"filename":"src/cr-image/format/ppm.cr","line_number":13,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/format/ppm.cr#L13"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Format","kind":"module","full_name":"CrImage::Format","name":"Format"},"doc":"Provides methods to read from and write to PPM.\n\n```\nimage = File.open(\"image.ppm\") { |file| CrImage::RGBAImage.from_ppm(file) }\nFile.open(\"other_image.ppm\") { |file| image.to_ppm(file) }\n```\nAlternatively, you can use the convenience methods in the `Open` and `Save` modules\nto acheive the same thing:\n```\nimage = CrImage::RGBAImage.open(\"image.ppm\")\nimage.save(\"other_image.ppm\")\n```","summary":"<p>Provides methods to read from and write to PPM.</p>","instance_methods":[{"html_id":"to_ppm(io:IO):Nil-instance-method","name":"to_ppm","doc":"Output this image to `io` using PPM image encoding","summary":"<p>Output this image to <code>io</code> using PPM image encoding</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/cr-image/format/ppm.cr","line_number":54,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/format/ppm.cr#L54"},"def":{"name":"to_ppm","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << \"P6\\n\"\n(((io << @width) << \" \") << @height) << \"\\n\"\nio << \"255\\n\"\nsize.times do |index|\n  io.write_byte(red.unsafe_fetch(index))\n  io.write_byte(green.unsafe_fetch(index))\n  io.write_byte(blue.unsafe_fetch(index))\nend\n"}}]},{"html_id":"cr-image/CrImage/Format/Save","path":"CrImage/Format/Save.html","kind":"module","full_name":"CrImage::Format::Save","name":"Save","abstract":false,"locations":[{"filename":"src/cr-image/format/save.cr","line_number":12,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/format/save.cr#L12"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Format","kind":"module","full_name":"CrImage::Format","name":"Format"},"doc":"Provides a convenience method for saving image files to the filesystem.\nCurrently supports:\n* PPM (`.ppm`)\n* WebP (`.webp`)\n* JPEG (`.jpeg`, `.jpg`)\n* PNG (`.png`)\n\n```\nimage.save(\"image.jpg\")\n```\nSee `Open` for a convenience method to read images from the filesystem","summary":"<p>Provides a convenience method for saving image files to the filesystem.</p>","instance_methods":[{"html_id":"save(filename:String):self-instance-method","name":"save","doc":"Write this image to file using the provided filename.\n\nThis method _will not_ create intermediate directory paths. This method will throw an\nerror if they don't exist.","summary":"<p>Write this image to file using the provided filename.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String"}],"args_string":"(filename : String) : self","args_html":"(filename : String) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/format/save.cr","line_number":17,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/format/save.cr#L17"},"def":{"name":"save","args":[{"name":"filename","external_name":"filename","restriction":"String"}],"return_type":"self","visibility":"Public","body":"File.open(filename, \"w\") do |file|\n  case filename\n  when .ends_with?(\".ppm\")\n    to_ppm(file)\n  when .ends_with?(\".jpg\"), .ends_with?(\".jpeg\")\n    to_jpeg(file)\n  when .ends_with?(\".webp\")\n    to_webp(file)\n  when .ends_with?(\".png\")\n    to_png(file)\n  else\n    raise(\"Unknown file extension for filename #{filename}, only support .webp, .png, .ppm, .jpg, and .jpeg\")\n  end\nend\nself\n"}}]},{"html_id":"cr-image/CrImage/Format/WebP","path":"CrImage/Format/WebP.html","kind":"module","full_name":"CrImage::Format::WebP","name":"WebP","abstract":false,"locations":[{"filename":"src/cr-image/format/webp.cr","line_number":15,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/format/webp.cr#L15"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Format","kind":"module","full_name":"CrImage::Format","name":"Format"},"doc":"Provides methods to read from and write to WebP. Requires `libwebp` to function.\n\n```\nimage = File.open(\"image.webp\") { |file| CrImage::RGBAImage.from_webp(file) }\nFile.open(\"other_image.webp\") { |file| image.to_webp(file) }\n```\nAlternatively, you can use the convenience methods in the `Open` and `Save` modules\nto acheive the same thing:\n```\nimage = CrImage::RGBAImage.open(\"image.webp\")\nimage.save(\"other_image.webp\")\n```","summary":"<p>Provides methods to read from and write to WebP.</p>","instance_methods":[{"html_id":"to_webp(io:IO):Nil-instance-method","name":"to_webp","doc":"Write image to `io` using WebP encoding","summary":"<p>Write image to <code>io</code> using WebP encoding</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/cr-image/format/webp.cr","line_number":56,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/format/webp.cr#L56"},"def":{"name":"to_webp","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"image_data = String.build do |string|\n  size.times do |index|\n    string.write_byte(red.unsafe_fetch(index))\n    string.write_byte(green.unsafe_fetch(index))\n    string.write_byte(blue.unsafe_fetch(index))\n    string.write_byte(alpha.unsafe_fetch(index))\n  end\nend\nsize = LibWebP.encode_lossless_rgba(image_data, @width, @height, @width * 4, out buffer)\ncheck_webp(size)\nbytes = Bytes.new(buffer, size)\nio.write(bytes)\nLibWebP.free(buffer)\n"}}]}]},{"html_id":"cr-image/CrImage/GrayscaleImage","path":"CrImage/GrayscaleImage.html","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage","abstract":false,"superclass":{"html_id":"cr-image/CrImage/Image","kind":"class","full_name":"CrImage::Image","name":"Image"},"ancestors":[{"html_id":"cr-image/CrImage/Operation/MaskApply","kind":"module","full_name":"CrImage::Operation::MaskApply","name":"MaskApply"},{"html_id":"cr-image/CrImage/Format/Save","kind":"module","full_name":"CrImage::Format::Save","name":"Save"},{"html_id":"cr-image/CrImage/Operation/Draw","kind":"module","full_name":"CrImage::Operation::Draw","name":"Draw"},{"html_id":"cr-image/CrImage/Operation/Crop","kind":"module","full_name":"CrImage::Operation::Crop","name":"Crop"},{"html_id":"cr-image/CrImage/Operation/VerticalBlur","kind":"module","full_name":"CrImage::Operation::VerticalBlur","name":"VerticalBlur"},{"html_id":"cr-image/CrImage/Operation/HorizontalBlur","kind":"module","full_name":"CrImage::Operation::HorizontalBlur","name":"HorizontalBlur"},{"html_id":"cr-image/CrImage/Operation/GaussianBlur","kind":"module","full_name":"CrImage::Operation::GaussianBlur","name":"GaussianBlur"},{"html_id":"cr-image/CrImage/Operation/Contrast","kind":"module","full_name":"CrImage::Operation::Contrast","name":"Contrast"},{"html_id":"cr-image/CrImage/Operation/ChannelSwap","kind":"module","full_name":"CrImage::Operation::ChannelSwap","name":"ChannelSwap"},{"html_id":"cr-image/CrImage/Operation/Brightness","kind":"module","full_name":"CrImage::Operation::Brightness","name":"Brightness"},{"html_id":"cr-image/CrImage/Operation/BoxBlur","kind":"module","full_name":"CrImage::Operation::BoxBlur","name":"BoxBlur"},{"html_id":"cr-image/CrImage/Operation/BilinearResize","kind":"module","full_name":"CrImage::Operation::BilinearResize","name":"BilinearResize"},{"html_id":"cr-image/CrImage/Format/PNG","kind":"module","full_name":"CrImage::Format::PNG","name":"PNG"},{"html_id":"cr-image/CrImage/Format/WebP","kind":"module","full_name":"CrImage::Format::WebP","name":"WebP"},{"html_id":"cr-image/CrImage/Format/PPM","kind":"module","full_name":"CrImage::Format::PPM","name":"PPM"},{"html_id":"cr-image/CrImage/Format/JPEG","kind":"module","full_name":"CrImage::Format::JPEG","name":"JPEG"},{"html_id":"cr-image/CrImage/Image","kind":"class","full_name":"CrImage::Image","name":"Image"},{"html_id":"cr-image/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cr-image/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-image/grayscale_image.cr","line_number":5,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L5"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"cr-image/CrImage/Format/JPEG","kind":"module","full_name":"CrImage::Format::JPEG","name":"JPEG"},{"html_id":"cr-image/CrImage/Format/PNG","kind":"module","full_name":"CrImage::Format::PNG","name":"PNG"},{"html_id":"cr-image/CrImage/Format/PPM","kind":"module","full_name":"CrImage::Format::PPM","name":"PPM"},{"html_id":"cr-image/CrImage/Format/Save","kind":"module","full_name":"CrImage::Format::Save","name":"Save"},{"html_id":"cr-image/CrImage/Format/WebP","kind":"module","full_name":"CrImage::Format::WebP","name":"WebP"},{"html_id":"cr-image/CrImage/Operation/BilinearResize","kind":"module","full_name":"CrImage::Operation::BilinearResize","name":"BilinearResize"},{"html_id":"cr-image/CrImage/Operation/BoxBlur","kind":"module","full_name":"CrImage::Operation::BoxBlur","name":"BoxBlur"},{"html_id":"cr-image/CrImage/Operation/Brightness","kind":"module","full_name":"CrImage::Operation::Brightness","name":"Brightness"},{"html_id":"cr-image/CrImage/Operation/ChannelSwap","kind":"module","full_name":"CrImage::Operation::ChannelSwap","name":"ChannelSwap"},{"html_id":"cr-image/CrImage/Operation/Contrast","kind":"module","full_name":"CrImage::Operation::Contrast","name":"Contrast"},{"html_id":"cr-image/CrImage/Operation/Crop","kind":"module","full_name":"CrImage::Operation::Crop","name":"Crop"},{"html_id":"cr-image/CrImage/Operation/Draw","kind":"module","full_name":"CrImage::Operation::Draw","name":"Draw"},{"html_id":"cr-image/CrImage/Operation/GaussianBlur","kind":"module","full_name":"CrImage::Operation::GaussianBlur","name":"GaussianBlur"},{"html_id":"cr-image/CrImage/Operation/HorizontalBlur","kind":"module","full_name":"CrImage::Operation::HorizontalBlur","name":"HorizontalBlur"},{"html_id":"cr-image/CrImage/Operation/MaskApply","kind":"module","full_name":"CrImage::Operation::MaskApply","name":"MaskApply"},{"html_id":"cr-image/CrImage/Operation/VerticalBlur","kind":"module","full_name":"CrImage::Operation::VerticalBlur","name":"VerticalBlur"}],"extended_modules":[{"html_id":"cr-image/CrImage/Format/Open","kind":"module","full_name":"CrImage::Format::Open","name":"Open"}],"namespace":{"html_id":"cr-image/CrImage","kind":"module","full_name":"CrImage","name":"CrImage"},"doc":"An image in Grayscale. These image types are the easiest to perform feature and information extraction from, where\nthere is only one channel to examine, and so has methods for constructing `Mask`s from (see `#threshold` below).","summary":"<p>An image in Grayscale.</p>","constructors":[{"html_id":"from_jpeg(image_data:Bytes):self-class-method","name":"from_jpeg","doc":"Read `image_data` as JPEG encoded bytes","summary":"<p>Read <code>image_data</code> as JPEG encoded bytes</p>","abstract":false,"args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"args_string":"(image_data : Bytes) : self","args_html":"(image_data : Bytes) : <span class=\"k\">self</span>","def":{"name":"from_jpeg","args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"return_type":"self","visibility":"Public","body":"handle = LibJPEGTurbo.init_decompress\ncheck_jpeg(handle, LibJPEGTurbo.decompress_header3(handle, image_data, image_data.size, out width, out height, out _subsampling, out _colorspace))\nbuffer = Bytes.new((width * height) * 3, 0)\ncheck_jpeg(handle, LibJPEGTurbo.decompress2(handle, image_data, LibC::ULong.new(image_data.size), buffer, width, 0, height, LibJPEGTurbo::PixelFormat::RGB, 0))\ncheck_jpeg(handle, LibJPEGTurbo.destroy(handle))\nred = Array.new(width * height) do\n  0_u8\nend\ngreen = Array.new(width * height) do\n  0_u8\nend\nblue = Array.new(width * height) do\n  0_u8\nend\nalpha = Array.new(width * height) do\n  255_u8\nend\n(width * height).times do |index|\n  red.unsafe_put(index, buffer[index * 3])\n  green.unsafe_put(index, buffer[(index * 3) + 1])\n  blue.unsafe_put(index, buffer[(index * 3) + 2])\nend\nnew(red, green, blue, alpha, width, height)\n"}},{"html_id":"from_jpeg(io:IO):self-class-method","name":"from_jpeg","doc":"Construct an Image from reading in bytes from `io`","summary":"<p>Construct an Image from reading in bytes from <code>io</code></p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : self","args_html":"(io : IO) : <span class=\"k\">self</span>","def":{"name":"from_jpeg","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"self","visibility":"Public","body":"from_jpeg(io.getb_to_end)"}},{"html_id":"from_png(image_data:Bytes):self-class-method","name":"from_png","doc":"Read `image_data` and PNG encoded bytes","summary":"<p>Read <code>image_data</code> and PNG encoded bytes</p>","abstract":false,"args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"args_string":"(image_data : Bytes) : self","args_html":"(image_data : Bytes) : <span class=\"k\">self</span>","def":{"name":"from_png","args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"return_type":"self","visibility":"Public","body":"ctx = LibSPNG.ctx_new(LibSPNG::CtxFlags::None)\nif ctx\nelse\n  raise(::CrImage::Exception.new(\"Failed to create a context\"))\nend\nLibSPNG.set_png_buffer(ctx, image_data, image_data.size)\ncheck_png(LibSPNG.get_ihdr(ctx, out ihdr))\ncheck_png(LibSPNG.decoded_image_size(ctx, LibSPNG::Format::RGBA8, out image_size))\nimage = Bytes.new(image_size.to_i, 0_u8)\ncheck_png(LibSPNG.decode_image(ctx, image, image_size, LibSPNG::Format::RGBA8, LibSPNG::DecodeFlags::None))\nLibSPNG.ctx_free(ctx)\nsize = image_size // 4\nwidth = size // ihdr.height\nheight = ihdr.height\nred = Array.new(size) do\n  0_u8\nend\ngreen = Array.new(size) do\n  0_u8\nend\nblue = Array.new(size) do\n  0_u8\nend\nalpha = Array.new(size) do\n  0_u8\nend\nsize.times do |index|\n  position = index * 4\n  red.unsafe_put(index, image[position + 0])\n  green.unsafe_put(index, image[position + 1])\n  blue.unsafe_put(index, image[position + 2])\n  alpha.unsafe_put(index, image[position + 3])\nend\nnew(red, green, blue, alpha, width.to_i, height.to_i)\n"}},{"html_id":"from_png(io:IO):self-class-method","name":"from_png","doc":"Construct an Image by reading bytes from `io`","summary":"<p>Construct an Image by reading bytes from <code>io</code></p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : self","args_html":"(io : IO) : <span class=\"k\">self</span>","def":{"name":"from_png","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"self","visibility":"Public","body":"from_png(io.getb_to_end)"}},{"html_id":"from_ppm(image_data:Bytes):self-class-method","name":"from_ppm","doc":"Read `image_data` as PPM encoded bytes","summary":"<p>Read <code>image_data</code> as PPM encoded bytes</p>","abstract":false,"args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"args_string":"(image_data : Bytes) : self","args_html":"(image_data : Bytes) : <span class=\"k\">self</span>","def":{"name":"from_ppm","args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"return_type":"self","visibility":"Public","body":"from_ppm(IO::Memory.new(image_data))"}},{"html_id":"from_ppm(io:IO):self-class-method","name":"from_ppm","doc":"Read bytes from `io` as PPM encoded","summary":"<p>Read bytes from <code>io</code> as PPM encoded</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : self","args_html":"(io : IO) : <span class=\"k\">self</span>","def":{"name":"from_ppm","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"self","visibility":"Public","body":"_magic_number = io.gets(\"\\n\", chomp: true)\nwidth = (io.gets(\" \", chomp: true)).try(&.to_i)\nheight = (io.gets(\"\\n\", chomp: true)).try(&.to_i)\n_maximum_color_value = io.gets(\"\\n\", chomp: true)\nif width && height\n  red = Array.new(width * height) do\n    0_u8\n  end\n  green = Array.new(width * height) do\n    0_u8\n  end\n  blue = Array.new(width * height) do\n    0_u8\n  end\n  alpha = Array.new(width * height) do\n    255_u8\n  end\n  (width * height).times do |index|\n    red_byte = io.read_byte\n    green_byte = io.read_byte\n    blue_byte = io.read_byte\n    if (red_byte && green_byte) && blue_byte\n      red.unsafe_put(index, red_byte)\n      green.unsafe_put(index, green_byte)\n      blue.unsafe_put(index, blue_byte)\n    else\n      raise(\"The image ends prematurely\")\n    end\n  end\n  new(red, green, blue, alpha, width, height)\nelse\n  raise(\"The image doesn't have width or height\")\nend\n"}},{"html_id":"from_webp(image_data:Bytes):self-class-method","name":"from_webp","doc":"Read `image_data` as WebP encoded bytes","summary":"<p>Read <code>image_data</code> as WebP encoded bytes</p>","abstract":false,"args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"args_string":"(image_data : Bytes) : self","args_html":"(image_data : Bytes) : <span class=\"k\">self</span>","def":{"name":"from_webp","args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"return_type":"self","visibility":"Public","body":"check_webp(LibWebP.get_info(image_data, image_data.size, out width, out height))\nbuffer = LibWebP.decode_rgba(image_data, image_data.size, pointerof(width), pointerof(height))\nred = Array.new(width * height) do\n  0_u8\nend\ngreen = Array.new(width * height) do\n  0_u8\nend\nblue = Array.new(width * height) do\n  0_u8\nend\nalpha = Array.new(width * height) do\n  0_u8\nend\n(width * height).times do |index|\n  red.unsafe_put(index, buffer[index * 4])\n  green.unsafe_put(index, buffer[(index * 4) + 1])\n  blue.unsafe_put(index, buffer[(index * 4) + 2])\n  alpha.unsafe_put(index, buffer[(index * 4) + 3])\nend\nLibWebP.free(buffer)\nnew(red, green, blue, alpha, width, height)\n"}},{"html_id":"from_webp(io:IO):self-class-method","name":"from_webp","doc":"Read bytes from `io` as WebP encoded","summary":"<p>Read bytes from <code>io</code> as WebP encoded</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : self","args_html":"(io : IO) : <span class=\"k\">self</span>","def":{"name":"from_webp","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"self","visibility":"Public","body":"from_webp(io.getb_to_end)"}},{"html_id":"new(red:Array(UInt8),green:Array(UInt8),blue:Array(UInt8),alpha:Array(UInt8),width:Int32,height:Int32)-class-method","name":"new","doc":"Create a GrayscaleImage from a set of color channels (delegates to `RGBAImage#to_gray`)","summary":"<p>Create a GrayscaleImage from a set of color channels (delegates to <code><a href=\"../CrImage/RGBAImage.html#to_gray%28red_multiplier%3AFloat%3D0.299%2Cgreen_multiplier%3AFloat%3D0.587%2Cblue_multiplier%3AFloat%3D0.114%29%3AGrayscaleImage-instance-method\">RGBAImage#to_gray</a></code>)</p>","abstract":false,"args":[{"name":"red","external_name":"red","restriction":"Array(UInt8)"},{"name":"green","external_name":"green","restriction":"Array(UInt8)"},{"name":"blue","external_name":"blue","restriction":"Array(UInt8)"},{"name":"alpha","external_name":"alpha","restriction":"Array(UInt8)"},{"name":"width","external_name":"width","restriction":"Int32"},{"name":"height","external_name":"height","restriction":"Int32"}],"args_string":"(red : Array(UInt8), green : Array(UInt8), blue : Array(UInt8), alpha : Array(UInt8), width : Int32, height : Int32)","args_html":"(red : Array(UInt8), green : Array(UInt8), blue : Array(UInt8), alpha : Array(UInt8), width : Int32, height : Int32)","location":{"filename":"src/cr-image/grayscale_image.cr","line_number":12,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L12"},"def":{"name":"new","args":[{"name":"red","external_name":"red","restriction":"Array(UInt8)"},{"name":"green","external_name":"green","restriction":"Array(UInt8)"},{"name":"blue","external_name":"blue","restriction":"Array(UInt8)"},{"name":"alpha","external_name":"alpha","restriction":"Array(UInt8)"},{"name":"width","external_name":"width","restriction":"Int32"},{"name":"height","external_name":"height","restriction":"Int32"}],"visibility":"Public","body":"(RGBAImage.new(red, green, blue, alpha, width, height)).to_gray"}},{"html_id":"new(gray:Array(UInt8),alpha:Array(UInt8),width:Int32,height:Int32)-class-method","name":"new","abstract":false,"args":[{"name":"gray","external_name":"gray","restriction":"::Array(::UInt8)"},{"name":"alpha","external_name":"alpha","restriction":"::Array(::UInt8)"},{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"height","external_name":"height","restriction":"::Int32"}],"args_string":"(gray : Array(UInt8), alpha : Array(UInt8), width : Int32, height : Int32)","args_html":"(gray : Array(UInt8), alpha : Array(UInt8), width : Int32, height : Int32)","location":{"filename":"src/cr-image/grayscale_image.cr","line_number":16,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L16"},"def":{"name":"new","args":[{"name":"gray","external_name":"gray","restriction":"::Array(::UInt8)"},{"name":"alpha","external_name":"alpha","restriction":"::Array(::UInt8)"},{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"height","external_name":"height","restriction":"::Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(gray, alpha, width, height)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(gray:Array(UInt8),width:Int32,height:Int32)-class-method","name":"new","doc":"Create a GrayscaleImage with only an `Array(UInt8)` (alpha channel initialized as `255` throughout)","summary":"<p>Create a GrayscaleImage with only an <code>Array(UInt8)</code> (alpha channel initialized as <code>255</code> throughout)</p>","abstract":false,"args":[{"name":"gray","external_name":"gray","restriction":"::Array(::UInt8)"},{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"height","external_name":"height","restriction":"::Int32"}],"args_string":"(gray : Array(UInt8), width : Int32, height : Int32)","args_html":"(gray : Array(UInt8), width : Int32, height : Int32)","location":{"filename":"src/cr-image/grayscale_image.cr","line_number":20,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L20"},"def":{"name":"new","args":[{"name":"gray","external_name":"gray","restriction":"::Array(::UInt8)"},{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"height","external_name":"height","restriction":"::Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(gray, width, height)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](channel_type:ChannelType):Array(UInt8)-instance-method","name":"[]","doc":"Return the `Array(UInt8)` corresponding to `channel_type`","summary":"<p>Return the <code>Array(UInt8)</code> corresponding to <code>channel_type</code></p>","abstract":false,"args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"}],"args_string":"(channel_type : ChannelType) : Array(UInt8)","args_html":"(channel_type : <a href=\"../CrImage/ChannelType.html\">ChannelType</a>) : Array(UInt8)","location":{"filename":"src/cr-image/grayscale_image.cr","line_number":62,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L62"},"def":{"name":"[]","args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"}],"return_type":"Array(UInt8)","visibility":"Public","body":"if channel_type == ChannelType::Gray\n  return @alpha\nend\n@gray\n"}},{"html_id":"[]=(channel_type:ChannelType,channel:Array(UInt8)):Array(UInt8)-instance-method","name":"[]=","doc":"Set the underlying `Array(UInt8)` of `channel_type` to the new `channel`.\n\nWarning: this method does not check the size of the incoming array, and if it's a different\nsize from what the current image represents, this could break it. We recommend against using\nthis method except for from other methods that will be updating the `width` and `height` immediately after.","summary":"<p>Set the underlying <code>Array(UInt8)</code> of <code>channel_type</code> to the new <code>channel</code>.</p>","abstract":false,"args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"},{"name":"channel","external_name":"channel","restriction":"Array(UInt8)"}],"args_string":"(channel_type : ChannelType, channel : Array(UInt8)) : Array(UInt8)","args_html":"(channel_type : <a href=\"../CrImage/ChannelType.html\">ChannelType</a>, channel : Array(UInt8)) : Array(UInt8)","location":{"filename":"src/cr-image/grayscale_image.cr","line_number":72,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L72"},"def":{"name":"[]=","args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"},{"name":"channel","external_name":"channel","restriction":"Array(UInt8)"}],"return_type":"Array(UInt8)","visibility":"Public","body":"case channel_type\nwhen ChannelType::Gray\n  self.gray = channel\nwhen ChannelType::Alpha\n  self.alpha = channel\nelse\n  raise(\"Unknown channel type #{channel_type} for GrayscaleImage\")\nend"}},{"html_id":"alpha:Array(UInt8)-instance-method","name":"alpha","doc":"Return `alpha` channel","summary":"<p>Return <code><a href=\"../CrImage/GrayscaleImage.html#alpha%3AArray%28UInt8%29-instance-method\">#alpha</a></code> channel</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":50,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L50"},"def":{"name":"alpha","return_type":"Array(UInt8)","visibility":"Public","body":"@alpha"}},{"html_id":"alpha=(alpha:Array(UInt8))-instance-method","name":"alpha=","abstract":false,"args":[{"name":"alpha","external_name":"alpha","restriction":"Array(UInt8)"}],"args_string":"(alpha : Array(UInt8))","args_html":"(alpha : Array(UInt8))","location":{"filename":"src/cr-image/grayscale_image.cr","line_number":7,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L7"},"def":{"name":"alpha=","args":[{"name":"alpha","external_name":"alpha","restriction":"Array(UInt8)"}],"visibility":"Public","body":"@alpha = alpha"}},{"html_id":"blue:Array(UInt8)-instance-method","name":"blue","doc":"Return the \"`blue`\" channel (returns `gray`)","summary":"<p>Return the &quot;<code><a href=\"../CrImage/GrayscaleImage.html#blue%3AArray%28UInt8%29-instance-method\">#blue</a></code>&quot; channel (returns <code><a href=\"../CrImage/GrayscaleImage.html#gray%3AArray%28UInt8%29-instance-method\">#gray</a></code>)</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":45,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L45"},"def":{"name":"blue","return_type":"Array(UInt8)","visibility":"Public","body":"@gray"}},{"html_id":"clone:GrayscaleImage-instance-method","name":"clone","doc":"Create a new GrayscaleImage as a copy of this one","summary":"<p>Create a new GrayscaleImage as a copy of this one</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":25,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L25"},"def":{"name":"clone","return_type":"GrayscaleImage","visibility":"Public","body":"self.class.new(@gray.clone, @alpha.clone, @width, @height)"}},{"html_id":"each_channel(&:Array(UInt8),ChannelType->Nil):Nil-instance-method","name":"each_channel","doc":"Run provided block with the `ChannelType::Gray` and `ChannelType::Alpha` channels and channel types.","summary":"<p>Run provided block with the <code><a href=\"../CrImage/ChannelType.html#Gray\">ChannelType::Gray</a></code> and <code><a href=\"../CrImage/ChannelType.html#Alpha\">ChannelType::Alpha</a></code> channels and channel types.</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":55,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L55"},"def":{"name":"each_channel","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Array(UInt8), ChannelType -> Nil)"},"return_type":"Nil","visibility":"Public","body":"yield @gray, ChannelType::Gray\nyield @alpha, ChannelType::Alpha\nnil\n"}},{"html_id":"gray:Array(UInt8)-instance-method","name":"gray","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":6,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L6"},"def":{"name":"gray","return_type":"Array(UInt8)","visibility":"Public","body":"@gray"}},{"html_id":"gray=(gray:Array(UInt8))-instance-method","name":"gray=","abstract":false,"args":[{"name":"gray","external_name":"gray","restriction":"Array(UInt8)"}],"args_string":"(gray : Array(UInt8))","args_html":"(gray : Array(UInt8))","location":{"filename":"src/cr-image/grayscale_image.cr","line_number":6,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L6"},"def":{"name":"gray=","args":[{"name":"gray","external_name":"gray","restriction":"Array(UInt8)"}],"visibility":"Public","body":"@gray = gray"}},{"html_id":"green:Array(UInt8)-instance-method","name":"green","doc":"Return the \"`green`\" channel (returns `gray`)","summary":"<p>Return the &quot;<code><a href=\"../CrImage/GrayscaleImage.html#green%3AArray%28UInt8%29-instance-method\">#green</a></code>&quot; channel (returns <code><a href=\"../CrImage/GrayscaleImage.html#gray%3AArray%28UInt8%29-instance-method\">#gray</a></code>)</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":40,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L40"},"def":{"name":"green","return_type":"Array(UInt8)","visibility":"Public","body":"@gray"}},{"html_id":"height:Int32-instance-method","name":"height","doc":"Height of image","summary":"<p>Height of image</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":9,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L9"},"def":{"name":"height","return_type":"Int32","visibility":"Public","body":"@height"}},{"html_id":"height=(height:Int32)-instance-method","name":"height=","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"Int32"}],"args_string":"(height : Int32)","args_html":"(height : Int32)","location":{"filename":"src/cr-image/grayscale_image.cr","line_number":9,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L9"},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"Int32"}],"visibility":"Public","body":"@height = height"}},{"html_id":"invert-instance-method","name":"invert","doc":"Invert grayscale pixels (replace each pixel will `255 - p` for all `p` in `@gray`).\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/gray_sample.jpg\" alt=\"Woman in black turtleneck on white background in grayscale\"/>\n\nBecomes\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/gray_inverted_sample.jpg\" alt=\"Woman in black turtleneck on white background in inverted grayscale\"/>","summary":"<p>Invert grayscale pixels (replace each pixel will <code>255 - p</code> for all <code>p</code> in <code>@gray</code>).</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":104,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L104"},"def":{"name":"invert","visibility":"Public","body":"clone.invert!"}},{"html_id":"invert!-instance-method","name":"invert!","doc":"Invert grayscale pixels (replace each pixel will `255 - p` for all `p` in `@gray`). Modifies self.\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/gray_sample.jpg\" alt=\"Woman in black turtleneck on white background in grayscale\"/>\n\nBecomes\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/gray_inverted_sample.jpg\" alt=\"Woman in black turtleneck on white background in inverted grayscale\"/>","summary":"<p>Invert grayscale pixels (replace each pixel will <code>255 - p</code> for all <code>p</code> in <code>@gray</code>).</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":115,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L115"},"def":{"name":"invert!","visibility":"Public","body":"@gray.map! do |pix|\n  255_u8 - pix\nend\nself\n"}},{"html_id":"mask_from(&block:Int32,Int32,UInt8->Bool):Mask-instance-method","name":"mask_from","doc":"Construct a `Mask` from this `GrayscaleImage` using the passed in block to determine if a given pixel should be true or not\n\n```\n# Construct a mask identifying the bright pixels in the bottom left corner of image\nimage.to_gray.mask_from do |x, y, pixel|\n  x < image.width // 2 &&      # left half of image\n    y > (image.height // 2) && # bottom half of image\n    pixel > 128                # only \"bright\" pixels\nend\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman in black turtleneck on white background\"/>\n->\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/gray_mask_from_example.jpg\" alt=\"Mask identifying bright spots in lower left corner\"/>","summary":"<p>Construct a <code><a href=\"../CrImage/Mask.html\">Mask</a></code> from this <code><a href=\"../CrImage/GrayscaleImage.html\">GrayscaleImage</a></code> using the passed in block to determine if a given pixel should be true or not</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":133,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L133"},"def":{"name":"mask_from","yields":3,"block_arity":3,"block_arg":{"name":"block","external_name":"block","restriction":"(Int32, Int32, UInt8 -> Bool)"},"return_type":"Mask","visibility":"Public","body":"Mask.new(width, BitArray.new(size) do |i|\n  block.call(i % width, i // width, @gray[i])\nend)"}},{"html_id":"red:Array(UInt8)-instance-method","name":"red","doc":"Return the \"`red`\" channel (returns `gray`)","summary":"<p>Return the &quot;<code><a href=\"../CrImage/GrayscaleImage.html#red%3AArray%28UInt8%29-instance-method\">#red</a></code>&quot; channel (returns <code><a href=\"../CrImage/GrayscaleImage.html#gray%3AArray%28UInt8%29-instance-method\">#gray</a></code>)</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":35,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L35"},"def":{"name":"red","return_type":"Array(UInt8)","visibility":"Public","body":"@gray"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Return the number of pixels this image contains","summary":"<p>Return the number of pixels this image contains</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":93,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L93"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@width * @height"}},{"html_id":"threshold(threshold:Int):Mask-instance-method","name":"threshold","doc":"Construct a simple threshold `Mask` containing all pixels with a `UInt8` value greater than `threshold`\nGiven sample image:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman with black turtleneck and white background\"/>\n\n```\nimage\n  .to_gray                       # convert color image to grayscale one\n  .threshold(128)                # generate a mask using threshold operator\n  .to_gray                       # convert mask to grayscale image\n  .save(\"threshold_example.jpg\") # save mask as grayscale\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/gray_threshold_example.jpg\" alt=\"Black and white silhouette with background and woman's face as white, hair and sweater black\"/>","summary":"<p>Construct a simple threshold <code><a href=\"../CrImage/Mask.html\">Mask</a></code> containing all pixels with a <code>UInt8</code> value greater than <code><a href=\"../CrImage/GrayscaleImage.html#threshold%28threshold%3AInt%29%3AMask-instance-method\">#threshold</a></code> Given sample image:</p>","abstract":false,"args":[{"name":"threshold","external_name":"threshold","restriction":"Int"}],"args_string":"(threshold : Int) : Mask","args_html":"(threshold : Int) : <a href=\"../CrImage/Mask.html\">Mask</a>","location":{"filename":"src/cr-image/grayscale_image.cr","line_number":152,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L152"},"def":{"name":"threshold","args":[{"name":"threshold","external_name":"threshold","restriction":"Int"}],"return_type":"Mask","visibility":"Public","body":"mask_from do |_, _, pixel|\n  pixel >= threshold\nend"}},{"html_id":"to_gray:GrayscaleImage-instance-method","name":"to_gray","doc":"Returns self","summary":"<p>Returns self</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":88,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L88"},"def":{"name":"to_gray","return_type":"GrayscaleImage","visibility":"Public","body":"self"}},{"html_id":"to_rgba:RGBAImage-instance-method","name":"to_rgba","doc":"Convert this `GrayscaleImage` to an `RGBAImage`.\n\nNo color will be provided, all pixels will remain gray.","summary":"<p>Convert this <code><a href=\"../CrImage/GrayscaleImage.html\">GrayscaleImage</a></code> to an <code><a href=\"../CrImage/RGBAImage.html\">RGBAImage</a></code>.</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":83,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L83"},"def":{"name":"to_rgba","return_type":"RGBAImage","visibility":"Public","body":"RGBAImage.new(@gray.clone, @gray.clone, @gray.clone, @alpha.clone, width, height)"}},{"html_id":"width:Int32-instance-method","name":"width","doc":"Width of image","summary":"<p>Width of image</p>","abstract":false,"location":{"filename":"src/cr-image/grayscale_image.cr","line_number":8,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L8"},"def":{"name":"width","return_type":"Int32","visibility":"Public","body":"@width"}},{"html_id":"width=(width:Int32)-instance-method","name":"width=","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"}],"args_string":"(width : Int32)","args_html":"(width : Int32)","location":{"filename":"src/cr-image/grayscale_image.cr","line_number":8,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/grayscale_image.cr#L8"},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"Int32"}],"visibility":"Public","body":"@width = width"}}]},{"html_id":"cr-image/CrImage/Image","path":"CrImage/Image.html","kind":"class","full_name":"CrImage::Image","name":"Image","abstract":true,"superclass":{"html_id":"cr-image/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cr-image/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cr-image/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-image/image.cr","line_number":7,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/image.cr#L7"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage","kind":"module","full_name":"CrImage","name":"CrImage"},"doc":"Common base class for `GrayscaleImage` and `RGBAImage`. All `Image`s are readable and saveable\nto the filesystem or `IO` stream.","summary":"<p>Common base class for <code><a href=\"../CrImage/GrayscaleImage.html\">GrayscaleImage</a></code> and <code><a href=\"../CrImage/RGBAImage.html\">RGBAImage</a></code>.</p>","instance_methods":[{"html_id":"[](channel_type:ChannelType):Array(UInt8)-instance-method","name":"[]","doc":"Get the `Array(UInt8)` corresponding to `channel_type`)","summary":"<p>Get the <code>Array(UInt8)</code> corresponding to <code>channel_type</code>)</p>","abstract":true,"args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"}],"args_string":"(channel_type : ChannelType) : Array(UInt8)","args_html":"(channel_type : <a href=\"../CrImage/ChannelType.html\">ChannelType</a>) : Array(UInt8)","location":{"filename":"src/cr-image/image.cr","line_number":49,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/image.cr#L49"},"def":{"name":"[]","args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"}],"return_type":"Array(UInt8)","visibility":"Public","body":""}},{"html_id":"[]=(channel_type:ChannelType,channel:Array(UInt8)):Array(UInt8)-instance-method","name":"[]=","doc":"Set the `Array(UInt8)` corresponding to `channel_type`) to `channel`","summary":"<p>Set the <code>Array(UInt8)</code> corresponding to <code>channel_type</code>) to <code>channel</code></p>","abstract":true,"args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"},{"name":"channel","external_name":"channel","restriction":"Array(UInt8)"}],"args_string":"(channel_type : ChannelType, channel : Array(UInt8)) : Array(UInt8)","args_html":"(channel_type : <a href=\"../CrImage/ChannelType.html\">ChannelType</a>, channel : Array(UInt8)) : Array(UInt8)","location":{"filename":"src/cr-image/image.cr","line_number":51,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/image.cr#L51"},"def":{"name":"[]=","args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"},{"name":"channel","external_name":"channel","restriction":"Array(UInt8)"}],"return_type":"Array(UInt8)","visibility":"Public","body":""}},{"html_id":"alpha:Array(UInt8)-instance-method","name":"alpha","doc":"Return the alpha channel","summary":"<p>Return the alpha channel</p>","abstract":true,"location":{"filename":"src/cr-image/image.cr","line_number":37,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/image.cr#L37"},"def":{"name":"alpha","return_type":"Array(UInt8)","visibility":"Public","body":""}},{"html_id":"blue:Array(UInt8)-instance-method","name":"blue","doc":"Return the blue channel","summary":"<p>Return the blue channel</p>","abstract":true,"location":{"filename":"src/cr-image/image.cr","line_number":35,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/image.cr#L35"},"def":{"name":"blue","return_type":"Array(UInt8)","visibility":"Public","body":""}},{"html_id":"each_channel(&:Array(UInt8),ChannelType->Nil):Nil-instance-method","name":"each_channel","doc":"Run provided block on each channel supported by this image.","summary":"<p>Run provided block on each channel supported by this image.</p>","abstract":true,"location":{"filename":"src/cr-image/image.cr","line_number":46,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/image.cr#L46"},"def":{"name":"each_channel","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Array(UInt8), ChannelType -> Nil)"},"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"green:Array(UInt8)-instance-method","name":"green","doc":"Return the green channel","summary":"<p>Return the green channel</p>","abstract":true,"location":{"filename":"src/cr-image/image.cr","line_number":33,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/image.cr#L33"},"def":{"name":"green","return_type":"Array(UInt8)","visibility":"Public","body":""}},{"html_id":"height:Int32-instance-method","name":"height","doc":"Height of image","summary":"<p>Height of image</p>","abstract":true,"location":{"filename":"src/cr-image/image.cr","line_number":41,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/image.cr#L41"},"def":{"name":"height","return_type":"Int32","visibility":"Public","body":""}},{"html_id":"red:Array(UInt8)-instance-method","name":"red","doc":"Return the red channel","summary":"<p>Return the red channel</p>","abstract":true,"location":{"filename":"src/cr-image/image.cr","line_number":31,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/image.cr#L31"},"def":{"name":"red","return_type":"Array(UInt8)","visibility":"Public","body":""}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Size (total pixels) in image (`width` * `height`)","summary":"<p>Size (total pixels) in image (<code><a href=\"../CrImage/Image.html#width%3AInt32-instance-method\">#width</a></code> * <code><a href=\"../CrImage/Image.html#height%3AInt32-instance-method\">#height</a></code>)</p>","abstract":true,"location":{"filename":"src/cr-image/image.cr","line_number":43,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/image.cr#L43"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":""}},{"html_id":"width:Int32-instance-method","name":"width","doc":"Width of image","summary":"<p>Width of image</p>","abstract":true,"location":{"filename":"src/cr-image/image.cr","line_number":39,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/image.cr#L39"},"def":{"name":"width","return_type":"Int32","visibility":"Public","body":""}}]},{"html_id":"cr-image/CrImage/Mask","path":"CrImage/Mask.html","kind":"class","full_name":"CrImage::Mask","name":"Mask","abstract":false,"superclass":{"html_id":"cr-image/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"cr-image/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cr-image/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-image/mask.cr","line_number":38,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L38"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cr-image/CrImage","kind":"module","full_name":"CrImage","name":"CrImage"},"doc":"Mask is a wrapper around BitArray, where each flag represents a boolean bit of information about a pixel\nfrom an image. This can include whether a particular pixel has a value within certain conditions, OR\nif that pixel should be zeroed out or not.\n\n\n(x,y) - coordinates. Represent these positions in a Mask of size 10x10:\n\n```\n[\n  (0,0), (0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7), (0,8), (0,9),\n  (1,0), (1,1), (1,2), (1,3), (1,4), (1,5), (1,6), (1,7), (1,8), (1,9),\n  (2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2,6), (2,7), (2,8), (2,9),\n  (3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3,6), (3,7), (3,8), (3,9),\n  (4,0), (4,1), (4,2), (4,3), (4,4), (4,5), (4,6), (4,7), (4,8), (4,9),\n  (5,0), (5,1), (5,2), (5,3), (5,4), (5,5), (5,6), (5,7), (5,8), (5,9),\n  (6,0), (6,1), (6,2), (6,3), (6,4), (6,5), (6,6), (6,7), (6,8), (6,9),\n  (7,0), (7,1), (7,2), (7,3), (7,4), (7,5), (7,6), (7,7), (7,8), (7,9),\n  (8,0), (8,1), (8,2), (8,3), (8,4), (8,5), (8,6), (8,7), (8,8), (8,9),\n  (9,0), (9,1), (9,2), (9,3), (9,4), (9,5), (9,6), (9,7), (9,8), (9,9),\n]\n```\n\nAnd every position is a Bool value.\n\nDifferent ways to refer to coordinates:\n```\nmask.at(0, 0)    # => (0,0)\nmask[0, 0]       # => (0,0), same as .at(0, 0)\nmask[0..1, 4]    # => (4,0), (4,1)\nmask[3, 3..5]    # => (3,3), (3,4), (3,5)\nmask[2..3, 4..5] # => (2,4), (2,5), (3,4), (3,5)\n```\n\nSee `Operation::Crop` and `Operation::MaskApply` for how this can be useful","summary":"<p>Mask is a wrapper around BitArray, where each flag represents a boolean bit of information about a pixel from an image.</p>","constructors":[{"html_id":"new(width:Int32,height:Int32,initial:Bool=true)-class-method","name":"new","doc":"Construct a new `Mask` of width x height, preset to `initial`","summary":"<p>Construct a new <code><a href=\"../CrImage/Mask.html\">Mask</a></code> of width x height, preset to <code>initial</code></p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"height","external_name":"height","restriction":"Int32"},{"name":"initial","default_value":"true","external_name":"initial","restriction":"Bool"}],"args_string":"(width : Int32, height : Int32, initial : Bool = true)","args_html":"(width : Int32, height : Int32, initial : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/cr-image/mask.cr","line_number":48,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L48"},"def":{"name":"new","args":[{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"height","external_name":"height","restriction":"Int32"},{"name":"initial","default_value":"true","external_name":"initial","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(width, height, initial)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(width:Int32,height:Int32,int:Int)-class-method","name":"new","doc":"Construct a new `Mask` from an integer (useful for testing or small mask construction)","summary":"<p>Construct a new <code><a href=\"../CrImage/Mask.html\">Mask</a></code> from an integer (useful for testing or small mask construction)</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"height","external_name":"height","restriction":"Int32"},{"name":"int","external_name":"int","restriction":"Int"}],"args_string":"(width : Int32, height : Int32, int : Int)","args_html":"(width : Int32, height : Int32, int : Int)","location":{"filename":"src/cr-image/mask.cr","line_number":60,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L60"},"def":{"name":"new","args":[{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"height","external_name":"height","restriction":"Int32"},{"name":"int","external_name":"int","restriction":"Int"}],"visibility":"Public","body":"_ = allocate\n_.initialize(width, height, int)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(image:Image,initial:Bool=true)-class-method","name":"new","doc":"Construct a new `Mask` from the dimensions of passed in `image` with an initial bit","summary":"<p>Construct a new <code><a href=\"../CrImage/Mask.html\">Mask</a></code> from the dimensions of passed in <code>image</code> with an initial bit</p>","abstract":false,"args":[{"name":"image","external_name":"image","restriction":"Image"},{"name":"initial","default_value":"true","external_name":"initial","restriction":"Bool"}],"args_string":"(image : Image, initial : Bool = true)","args_html":"(image : <a href=\"../CrImage/Image.html\">Image</a>, initial : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/cr-image/mask.cr","line_number":66,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L66"},"def":{"name":"new","args":[{"name":"image","external_name":"image","restriction":"Image"},{"name":"initial","default_value":"true","external_name":"initial","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(image, initial)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(width:Int32,bits:BitArray)-class-method","name":"new","doc":"Construct a new `Mask` with a set width and bits from `bits`","summary":"<p>Construct a new <code><a href=\"../CrImage/Mask.html\">Mask</a></code> with a set width and bits from <code><a href=\"../CrImage/Mask.html#bits%3ABitArray-instance-method\">#bits</a></code></p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"bits","external_name":"bits","restriction":"::BitArray"}],"args_string":"(width : Int32, bits : BitArray)","args_html":"(width : Int32, bits : BitArray)","location":{"filename":"src/cr-image/mask.cr","line_number":43,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L43"},"def":{"name":"new","args":[{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"bits","external_name":"bits","restriction":"::BitArray"}],"visibility":"Public","body":"_ = allocate\n_.initialize(width, bits)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(width:Int32,height:Int32,&block:Int32,Int32->Bool)-class-method","name":"new","doc":"Construct a new `Mask` of width x height using `&block` to determine if a bit should be true or not (passed in `x` and `y` coordinates)","summary":"<p>Construct a new <code><a href=\"../CrImage/Mask.html\">Mask</a></code> of width x height using <code>&amp;block</code> to determine if a bit should be true or not (passed in <code>x</code> and <code>y</code> coordinates)</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"height","external_name":"height","restriction":"Int32"}],"args_string":"(width : Int32, height : Int32, &block : Int32, Int32 -> Bool)","args_html":"(width : Int32, height : Int32, &block : Int32, Int32 -> Bool)","location":{"filename":"src/cr-image/mask.cr","line_number":53,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L53"},"def":{"name":"new","args":[{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"height","external_name":"height","restriction":"Int32"}],"yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(Int32, Int32 -> Bool)"},"visibility":"Public","body":"_ = allocate\n_.initialize(width, height, &block) do |_arg0, _arg1|\n  yield _arg0, _arg1\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(other_bits:Array(BitArray))-class-method","name":"new","doc":"Construct a new `Mask` from an array of `BitArray`. See `#[](xs : Range, ys : Range) : Array(BitArray)`\n\nThis assumes `other_bits[0]` corresponds to `x == 0` in the mask, and the corresponding\n`BitArray` represents all bits for that row. All `BitArray`s must be of the same size in\n`other_bits`.","summary":"<p>Construct a new <code><a href=\"../CrImage/Mask.html\">Mask</a></code> from an array of <code>BitArray</code>.</p>","abstract":false,"args":[{"name":"other_bits","external_name":"other_bits","restriction":"Array(BitArray)"}],"args_string":"(other_bits : Array(BitArray))","args_html":"(other_bits : Array(BitArray))","location":{"filename":"src/cr-image/mask.cr","line_number":76,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L76"},"def":{"name":"new","args":[{"name":"other_bits","external_name":"other_bits","restriction":"Array(BitArray)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(other_bits)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:Mask)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Mask"}],"args_string":"(other : Mask)","args_html":"(other : <a href=\"../CrImage/Mask.html\">Mask</a>)","location":{"filename":"src/cr-image/mask.cr","line_number":165,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L165"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Mask"}],"visibility":"Public","body":"(width == other.width) && (bits == other.bits)"}},{"html_id":"[](x:Int32,y:Int32):Bool-instance-method","name":"[]","doc":"Return the bit at `x` and `y`","summary":"<p>Return the bit at <code>x</code> and <code>y</code></p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"y","external_name":"y","restriction":"Int32"}],"args_string":"(x : Int32, y : Int32) : Bool","args_html":"(x : Int32, y : Int32) : Bool","location":{"filename":"src/cr-image/mask.cr","line_number":135,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L135"},"def":{"name":"[]","args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"y","external_name":"y","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"if x >= width || y >= height\n  raise(IndexError.new(\"Out of bounds: this mask is #{width}x#{height}, and (#{x},#{y}) is outside of that\"))\nend\n@bits[(y * width) + x]\n"}},{"html_id":"[](xs:Range,y:Int32):BitArray-instance-method","name":"[]","doc":"Return a new `BitArray` corresponding to the partial row specified","summary":"<p>Return a new <code>BitArray</code> corresponding to the partial row specified</p>","abstract":false,"args":[{"name":"xs","external_name":"xs","restriction":"Range"},{"name":"y","external_name":"y","restriction":"Int32"}],"args_string":"(xs : Range, y : Int32) : BitArray","args_html":"(xs : Range, y : Int32) : BitArray","location":{"filename":"src/cr-image/mask.cr","line_number":141,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L141"},"def":{"name":"[]","args":[{"name":"xs","external_name":"xs","restriction":"Range"},{"name":"y","external_name":"y","restriction":"Int32"}],"return_type":"BitArray","visibility":"Public","body":"start, count = resolve_to_start_and_count(xs, width)\nBitArray.new(count) do |x|\n  self[x + start, y]\nend\n"}},{"html_id":"[](x:Int32,ys:Range):BitArray-instance-method","name":"[]","doc":"Return a new `BitArray` corresponding to the partial column specified","summary":"<p>Return a new <code>BitArray</code> corresponding to the partial column specified</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"ys","external_name":"ys","restriction":"Range"}],"args_string":"(x : Int32, ys : Range) : BitArray","args_html":"(x : Int32, ys : Range) : BitArray","location":{"filename":"src/cr-image/mask.cr","line_number":147,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L147"},"def":{"name":"[]","args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"ys","external_name":"ys","restriction":"Range"}],"return_type":"BitArray","visibility":"Public","body":"start, count = resolve_to_start_and_count(ys, height)\nBitArray.new(count) do |y|\n  self[x, y + start]\nend\n"}},{"html_id":"[](xs:Range,ys:Range):Array(BitArray)-instance-method","name":"[]","doc":"Return an `Array(BitArray)` for the partial box (of partial rows and partial columns) of this mask.\n\nCan be used to construct another mask from.","summary":"<p>Return an <code>Array(BitArray)</code> for the partial box (of partial rows and partial columns) of this mask.</p>","abstract":false,"args":[{"name":"xs","external_name":"xs","restriction":"Range"},{"name":"ys","external_name":"ys","restriction":"Range"}],"args_string":"(xs : Range, ys : Range) : Array(BitArray)","args_html":"(xs : Range, ys : Range) : Array(BitArray)","location":{"filename":"src/cr-image/mask.cr","line_number":155,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L155"},"def":{"name":"[]","args":[{"name":"xs","external_name":"xs","restriction":"Range"},{"name":"ys","external_name":"ys","restriction":"Range"}],"return_type":"Array(BitArray)","visibility":"Public","body":"start_x, count_x = resolve_to_start_and_count(xs, width)\nstart_y, count_y = resolve_to_start_and_count(ys, height)\ncount_y.times.to_a.map do |y|\n  BitArray.new(count_x) do |x|\n    self[x + start_x, y + start_y]\n  end\nend\n"}},{"html_id":"[]=(x:Int32,y:Int32,value:Bool):Bool-instance-method","name":"[]=","doc":"Set the bit for coordinate `x` and `y`\n\n```\nmask = CrImage::Mask.new(50, 50, false)\nmask[20, 20] = true\nmask.to_gray.save(\"mask_point.jpg\")\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/mask_point.jpg\" alt=\"Black box with single white point at 20, 20\"/>","summary":"<p>Set the bit for coordinate <code>x</code> and <code>y</code></p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"y","external_name":"y","restriction":"Int32"},{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(x : Int32, y : Int32, value : Bool) : Bool","args_html":"(x : Int32, y : Int32, value : Bool) : Bool","location":{"filename":"src/cr-image/mask.cr","line_number":185,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L185"},"def":{"name":"[]=","args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"y","external_name":"y","restriction":"Int32"},{"name":"value","external_name":"value","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"self.set(x, y, value)"}},{"html_id":"[]=(xs:Range,y:Int32,value:Bool):Bool-instance-method","name":"[]=","doc":"Set the bits for partial row `xs` at column `y`\n\n```\nmask = CrImage::Mask.new(50, 50, false)\nmask[20..40, 20] = true\nmask.to_gray.save(\"mask_partial_row.jpg\")\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/mask_partial_row.jpg\" alt=\"Black box with partial white horizontal line from 20, 20 to 40, 20\"/>","summary":"<p>Set the bits for partial row <code>xs</code> at column <code>y</code></p>","abstract":false,"args":[{"name":"xs","external_name":"xs","restriction":"Range"},{"name":"y","external_name":"y","restriction":"Int32"},{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(xs : Range, y : Int32, value : Bool) : Bool","args_html":"(xs : Range, y : Int32, value : Bool) : Bool","location":{"filename":"src/cr-image/mask.cr","line_number":197,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L197"},"def":{"name":"[]=","args":[{"name":"xs","external_name":"xs","restriction":"Range"},{"name":"y","external_name":"y","restriction":"Int32"},{"name":"value","external_name":"value","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"if y >= height\n  raise(IndexError.new(\"Out of bounds: #{y} is beyond the bounds of this mask's height of #{height}\"))\nend\nstart_x, count_x = resolve_to_start_and_count(xs, width)\n@bits.fill(value, (y * width) + start_x, count_x)\nclear_caches\nvalue\n"}},{"html_id":"[]=(x:Int32,ys:Range,value:Bool):Bool-instance-method","name":"[]=","doc":"Set the bits for row `x` and partial columns `ys`\n\n```\nmask = CrImage::Mask.new(50, 50, false)\nmask[20..40, 20] = true\nmask.to_gray.save(\"mask_partial_column.jpg\")\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/mask_partial_column.jpg\" alt=\"Black box with partial white vertical line from 20, 20 to 20, 40\"/>","summary":"<p>Set the bits for row <code>x</code> and partial columns <code>ys</code></p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"ys","external_name":"ys","restriction":"Range"},{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(x : Int32, ys : Range, value : Bool) : Bool","args_html":"(x : Int32, ys : Range, value : Bool) : Bool","location":{"filename":"src/cr-image/mask.cr","line_number":213,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L213"},"def":{"name":"[]=","args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"ys","external_name":"ys","restriction":"Range"},{"name":"value","external_name":"value","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"if x >= width\n  raise(IndexError.new(\"Out of bounds: #{x} is beyond the bounds of this mask's width of #{width}\"))\nend\nstart_y, count_y = resolve_to_start_and_count(ys, height)\ncount_y.times.to_a.each do |y|\n  set(x, y + start_y, value)\nend\nvalue\n"}},{"html_id":"[]=(xs:Range,ys:Range,value:Bool):Bool-instance-method","name":"[]=","doc":"Set the bits for partial rows `xs` and partial columns `ys`\n\n```\nmask = CrImage::Mask.new(50, 50, false)\nmask[20..40, 20..40] = true\nmask.to_gray.save(\"mask_partial_column.jpg\")\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/mask_box.jpg\" alt=\"Black box with smaller white box in it from 20, 20 to 40, 40\"/>","summary":"<p>Set the bits for partial rows <code>xs</code> and partial columns <code>ys</code></p>","abstract":false,"args":[{"name":"xs","external_name":"xs","restriction":"Range"},{"name":"ys","external_name":"ys","restriction":"Range"},{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(xs : Range, ys : Range, value : Bool) : Bool","args_html":"(xs : Range, ys : Range, value : Bool) : Bool","location":{"filename":"src/cr-image/mask.cr","line_number":230,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L230"},"def":{"name":"[]=","args":[{"name":"xs","external_name":"xs","restriction":"Range"},{"name":"ys","external_name":"ys","restriction":"Range"},{"name":"value","external_name":"value","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"start_x, count_x = resolve_to_start_and_count(xs, width)\nstart_y, count_y = resolve_to_start_and_count(ys, height)\ncount_y.times.to_a.each do |y|\n  @bits.fill(value, ((y + start_y) * width) + start_x, count_x)\nend\nclear_caches\nvalue\n"}},{"html_id":"apply(image:Image):Image-instance-method","name":"apply","doc":"Apply this mask to the provided image with `Operation::MaskApply#apply`","summary":"<p>Apply this mask to the provided image with <code><a href=\"../CrImage/Operation/MaskApply.html#apply%28mask%3AMask%29%3Aself-instance-method\">Operation::MaskApply#apply</a></code></p>","abstract":false,"args":[{"name":"image","external_name":"image","restriction":"Image"}],"args_string":"(image : Image) : Image","args_html":"(image : <a href=\"../CrImage/Image.html\">Image</a>) : <a href=\"../CrImage/Image.html\">Image</a>","location":{"filename":"src/cr-image/mask.cr","line_number":246,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L246"},"def":{"name":"apply","args":[{"name":"image","external_name":"image","restriction":"Image"}],"return_type":"Image","visibility":"Public","body":"image.apply(self)"}},{"html_id":"apply(image:Image,&block:Int32,Int32,UInt8,ChannelType->UInt8):Image-instance-method","name":"apply","doc":"Apply this mask to the provided image with `Operation::MaskApply#apply`","summary":"<p>Apply this mask to the provided image with <code><a href=\"../CrImage/Operation/MaskApply.html#apply%28mask%3AMask%29%3Aself-instance-method\">Operation::MaskApply#apply</a></code></p>","abstract":false,"args":[{"name":"image","external_name":"image","restriction":"Image"}],"args_string":"(image : Image, &block : Int32, Int32, UInt8, ChannelType -> UInt8) : Image","args_html":"(image : <a href=\"../CrImage/Image.html\">Image</a>, &block : Int32, Int32, UInt8, <a href=\"../CrImage/ChannelType.html\">ChannelType</a> -> UInt8) : <a href=\"../CrImage/Image.html\">Image</a>","location":{"filename":"src/cr-image/mask.cr","line_number":251,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L251"},"def":{"name":"apply","args":[{"name":"image","external_name":"image","restriction":"Image"}],"yields":4,"block_arity":4,"block_arg":{"name":"block","external_name":"block","restriction":"(Int32, Int32, UInt8, ChannelType -> UInt8)"},"return_type":"Image","visibility":"Public","body":"image.apply(self, &block)"}},{"html_id":"at(index:Int32):Bool-instance-method","name":"at","doc":"Return the bit at `index`","summary":"<p>Return the bit at <code>index</code></p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : Bool","args_html":"(index : Int32) : Bool","location":{"filename":"src/cr-image/mask.cr","line_number":123,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L123"},"def":{"name":"at","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"if index >= size\n  raise(\"Index #{index} exceeds mask size #{@bits.size}\")\nend\n@bits[index]\n"}},{"html_id":"bits:BitArray-instance-method","name":"bits","abstract":false,"location":{"filename":"src/cr-image/mask.cr","line_number":40,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L40"},"def":{"name":"bits","return_type":"BitArray","visibility":"Public","body":"@bits"}},{"html_id":"clone-instance-method","name":"clone","doc":"Create a new `Mask` from this one without modifying it","summary":"<p>Create a new <code><a href=\"../CrImage/Mask.html\">Mask</a></code> from this one without modifying it</p>","abstract":false,"location":{"filename":"src/cr-image/mask.cr","line_number":94,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L94"},"def":{"name":"clone","visibility":"Public","body":"Mask.new(width, bits.dup)"}},{"html_id":"height:Int32-instance-method","name":"height","abstract":false,"location":{"filename":"src/cr-image/mask.cr","line_number":98,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L98"},"def":{"name":"height","return_type":"Int32","visibility":"Public","body":"@bits.size // width"}},{"html_id":"invert-instance-method","name":"invert","doc":"Return a new `Mask` that's a copy of this one with all bits inverted.","summary":"<p>Return a new <code><a href=\"../CrImage/Mask.html\">Mask</a></code> that's a copy of this one with all bits inverted.</p>","abstract":false,"location":{"filename":"src/cr-image/mask.cr","line_number":116,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L116"},"def":{"name":"invert","visibility":"Public","body":"new_bits = @bits.dup\nnew_bits.invert\nMask.new(width, new_bits)\n"}},{"html_id":"invert!-instance-method","name":"invert!","doc":"Invert all bits in this instance of `Mask`. Modifies self.\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/mask_segments_example.jpg\" alt=\"Black box with different regions colored white\"/>\n\nBecomes\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/mask_inverted_example.jpg\" alt=\"White box with opposite regions colored black\"/>","summary":"<p>Invert all bits in this instance of <code><a href=\"../CrImage/Mask.html\">Mask</a></code>.</p>","abstract":false,"location":{"filename":"src/cr-image/mask.cr","line_number":109,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L109"},"def":{"name":"invert!","visibility":"Public","body":"@bits.invert\nclear_caches\nself\n"}},{"html_id":"region:Region-instance-method","name":"region","doc":"Returns the bounding box of the mask where all true bits are contained. Any pixels outside of the region are false\n\n```\nmask = CrImage::Mask.new(50, 50, false)\nmask[20..40, 20] = true\nmask[20, 20..40] = true\nmask.region # => Region(x: 20, y: 20, width: 20, height: 20)\n```\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/mask_region_example.jpg\" alt=\"Black box with white lines from 20, 20 going to 20, 40 and 40, 20\"/>","summary":"<p>Returns the bounding box of the mask where all true bits are contained.</p>","abstract":false,"location":{"filename":"src/cr-image/mask.cr","line_number":273,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L273"},"def":{"name":"region","return_type":"Region","visibility":"Public","body":"@region || (@region = calculate_region)"}},{"html_id":"segments(*,diagonal:Bool=true):Array(Mask)-instance-method","name":"segments","doc":"Return an array of `Mask`s, each one corresponding to an area of contiguous true bits (identified from flood fills).\n\nMay specify `diagonal: false` for only 4-way (up, down, left, right) flood fill instead of default 8-way.\nStarting with sample mask:\n```\nmask = CrImage::Mask.new(50, 50, false)\n\nmask[5..45, 5..45] = true\nmask[15..35, 15..35] = false\nmask[21..25, 21..25] = true\nmask[26..30, 26..30] = true\n```\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/mask_segments_example.jpg\" alt=\"Black box with different regions colored white\"/>\n\nIts segments look like:\n```\nmask.segments.each_with_index do |segment, i|\n  segment.to_gray.save(\"mask_8-way_segments_example_#{i}.jpg\")\nend\n```\nYields the images:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/mask_8-way_segments_example_0.jpg\" alt=\"Black box with hollow white box in it\"/>\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/mask_8-way_segments_example_1.jpg\" alt=\"Black box with two diagonal white boxes touching in the corner\"/>\n\nUsing `diagonal: false` yields:\n```\nmask.segments(diagonal: false).each_with_index do |segment, i|\n  segment.to_gray.save(\"mask_4-way_segments_example_#{i}.jpg\")\nend\n```\nYields the images:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/mask_4-way_segments_example_0.jpg\" alt=\"Black box with hollow white box in it\"/>\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/mask_4-way_segments_example_1.jpg\" alt=\"Black box with small white box in upper left center\"/>\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/mask_4-way_segments_example_2.jpg\" alt=\"Black box with small white box in lower right center\"/>","summary":"<p>Return an array of <code><a href=\"../CrImage/Mask.html\">Mask</a></code>s, each one corresponding to an area of contiguous true bits (identified from flood fills).</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"diagonal","default_value":"true","external_name":"diagonal","restriction":"Bool"}],"args_string":"(*, diagonal : Bool = true) : Array(Mask)","args_html":"(*, diagonal : Bool = <span class=\"n\">true</span>) : Array(<a href=\"../CrImage/Mask.html\">Mask</a>)","location":{"filename":"src/cr-image/mask.cr","line_number":341,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L341"},"def":{"name":"segments","args":[{"name":"","external_name":"","restriction":""},{"name":"diagonal","default_value":"true","external_name":"diagonal","restriction":"Bool"}],"splat_index":0,"return_type":"Array(Mask)","visibility":"Public","body":"diagonal ? (@segments_8_way || (@segments_8_way = calculate_segments(diagonal))) : (@segments_4_way || (@segments_4_way = calculate_segments(diagonal)))"}},{"html_id":"set(x:Int32,y:Int32,value:Bool):Bool-instance-method","name":"set","doc":"Set the bit for coordinate `x` and `y`","summary":"<p>Set the bit for coordinate <code>x</code> and <code>y</code></p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"y","external_name":"y","restriction":"Int32"},{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(x : Int32, y : Int32, value : Bool) : Bool","args_html":"(x : Int32, y : Int32, value : Bool) : Bool","location":{"filename":"src/cr-image/mask.cr","line_number":171,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L171"},"def":{"name":"set","args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"y","external_name":"y","restriction":"Int32"},{"name":"value","external_name":"value","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"if x >= width || y >= height\n  raise(IndexError.new(\"Out of bounds: this mask is #{width}x#{height}, and (#{x},#{y}) is outside of that\"))\nend\nclear_caches\n@bits[(y * width) + x] = value\n"}},{"html_id":"size(*args,**options)-instance-method","name":"size","doc":"How many bits are stored in this `Mask`","summary":"<p>How many bits are stored in this <code><a href=\"../CrImage/Mask.html\">Mask</a></code></p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/cr-image/mask.cr","line_number":91,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L91"},"def":{"name":"size","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"bits.size(*args, **options)"}},{"html_id":"size(*args,**options,&)-instance-method","name":"size","doc":"How many bits are stored in this `Mask`","summary":"<p>How many bits are stored in this <code><a href=\"../CrImage/Mask.html\">Mask</a></code></p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/cr-image/mask.cr","line_number":91,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L91"},"def":{"name":"size","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"bits.size(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_gray:GrayscaleImage-instance-method","name":"to_gray","doc":"Convert this `Mask` to a `GrayscaleImage`, with false bits becoming 0, and true bits becoming 255","summary":"<p>Convert this <code><a href=\"../CrImage/Mask.html\">Mask</a></code> to a <code><a href=\"../CrImage/GrayscaleImage.html\">GrayscaleImage</a></code>, with false bits becoming 0, and true bits becoming 255</p>","abstract":false,"location":{"filename":"src/cr-image/mask.cr","line_number":241,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L241"},"def":{"name":"to_gray","return_type":"GrayscaleImage","visibility":"Public","body":"GrayscaleImage.new(bits.map do |b|\n  b ? 255_u8 : 0_u8\nend, width, height)"}},{"html_id":"width:Int32-instance-method","name":"width","abstract":false,"location":{"filename":"src/cr-image/mask.cr","line_number":39,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/mask.cr#L39"},"def":{"name":"width","return_type":"Int32","visibility":"Public","body":"@width"}}]},{"html_id":"cr-image/CrImage/Operation","path":"CrImage/Operation.html","kind":"module","full_name":"CrImage::Operation","name":"Operation","abstract":false,"locations":[{"filename":"src/cr-image/operation/bilinear_resize.cr","line_number":14,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/bilinear_resize.cr#L14"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cr-image/CrImage","kind":"module","full_name":"CrImage","name":"CrImage"},"types":[{"html_id":"cr-image/CrImage/Operation/BilinearResize","path":"CrImage/Operation/BilinearResize.html","kind":"module","full_name":"CrImage::Operation::BilinearResize","name":"BilinearResize","abstract":false,"locations":[{"filename":"src/cr-image/operation/bilinear_resize.cr","line_number":14,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/bilinear_resize.cr#L14"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Operation","kind":"module","full_name":"CrImage::Operation","name":"Operation"},"doc":"Resize an image using a bilinear resizing algorithm.\n\nTaking sample `image`:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman with black turtleneck and white background\"/>\n\n```\nputs image.width, image.height # => 159x199\nimage.bilinear_resize(40, 50).save(\"small_sample.jpg\")\nimage.bilinear_resize(200, 250).save(\"larger_sample.jpg\")\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/small_sample.jpg\" alt=\"Sample image reduced to 20% size\"/>\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/larger_sample.jpg\" alt=\"Sample image increased by 25% size\"/>","summary":"<p>Resize an image using a bilinear resizing algorithm.</p>","instance_methods":[{"html_id":"bilinear_resize(width:Int32,height:Int32):self-instance-method","name":"bilinear_resize","doc":"Resizes image to new dimensions","summary":"<p>Resizes image to new dimensions</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"},{"name":"height","external_name":"height","restriction":"Int32"}],"args_string":"(width : Int32, height : Int32) : self","args_html":"(width : Int32, height : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/bilinear_resize.cr","line_number":16,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/bilinear_resize.cr#L16"},"def":{"name":"bilinear_resize","args":[{"name":"width","external_name":"width","restriction":"Int32"},{"name":"height","external_name":"height","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"clone.bilinear_resize!(width, height)"}},{"html_id":"bilinear_resize!(width:Int32,height:Int32):self-instance-method","name":"bilinear_resize!","doc":"Resizes image to new dimensions. Modifies self.","summary":"<p>Resizes image to new dimensions.</p>","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"},{"name":"height","external_name":"height","restriction":"Int32"}],"args_string":"(width : Int32, height : Int32) : self","args_html":"(width : Int32, height : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/bilinear_resize.cr","line_number":21,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/bilinear_resize.cr#L21"},"def":{"name":"bilinear_resize!","args":[{"name":"width","external_name":"width","restriction":"Int32"},{"name":"height","external_name":"height","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"x_ratio = width > 1 ? (@width - 1) / (width - 1) : 0\ny_ratio = height > 1 ? (@height - 1) / (height - 1) : 0\neach_channel do |channel, channel_type|\n  resized_channel = Array.new(width * height) do\n    0_u8\n  end\n  height.times do |h|\n    width.times do |w|\n      x = w * x_ratio\n      y = h * y_ratio\n      x_ceil = Math.min(@width - 1, x.ceil.to_i)\n      x_floor = x.floor.to_i\n      y_ceil = Math.min(@height - 1, y.ceil.to_i)\n      y_floor = y.floor.to_i\n      value = case\n      when (x_ceil == x_floor) && (y_ceil == y_floor)\n        x_index = x.to_i\n        y_index = y.to_i\n        channel.unsafe_fetch((@width * y_index) + x_index)\n      when x_ceil == x_floor\n        x_index = x.to_i\n        q_1 = channel.unsafe_fetch((@width * y_ceil) + x_index)\n        q_2 = channel.unsafe_fetch((@width * y_floor) + x_index)\n        ((q_2 * (y_ceil - y)) + (q_1 * (y - y_floor))).to_u8\n      when y_ceil == y_floor\n        y_index = y.to_i\n        q_1 = channel.unsafe_fetch((@width * y_index) + x_ceil)\n        q_2 = channel.unsafe_fetch((@width * y_index) + x_floor)\n        ((q_2 * (x_ceil - x)) + (q_1 * (x - x_floor))).to_u8\n      else\n        v_1 = channel.unsafe_fetch((@width * y_floor) + x_floor)\n        v_2 = channel.unsafe_fetch((@width * y_floor) + x_ceil)\n        v_3 = channel.unsafe_fetch((@width * y_ceil) + x_floor)\n        v_4 = channel.unsafe_fetch((@width * y_ceil) + x_ceil)\n        q_1 = (v_1 * (x_ceil - x)) + (v_2 * (x - x_floor))\n        q_2 = (v_3 * (x_ceil - x)) + (v_4 * (x - x_floor))\n        ((q_1 * (y_ceil - y)) + (q_2 * (y - y_floor))).to_u8\n      end\n      resized_channel.unsafe_put((width * h) + w, value)\n    end\n  end\n  self[channel_type] = resized_channel\nend\n@width = width\n@height = height\nself\n"}}]},{"html_id":"cr-image/CrImage/Operation/BoxBlur","path":"CrImage/Operation/BoxBlur.html","kind":"module","full_name":"CrImage::Operation::BoxBlur","name":"BoxBlur","abstract":false,"locations":[{"filename":"src/cr-image/operation/box_blur.cr","line_number":13,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/box_blur.cr#L13"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Operation","kind":"module","full_name":"CrImage::Operation","name":"Operation"},"doc":"Blurs the image\n\nTaking sample `image`:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman with black turtleneck and white background\"/>\n\n```\nimage.box_blur(1).save(\"blurred_1_sample.jpg\")\nimage.box_blur(5).save(\"blurred_5_sample.jpg\")\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/blurred_1_sample.jpg\" alt=\"Blurred sample image with value 1\"/>\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/blurred_5_sample.jpg\" alt=\"Blurred sample image with value 5\"/>","summary":"<p>Blurs the image</p>","instance_methods":[{"html_id":"box_blur(value:Int32):self-instance-method","name":"box_blur","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32) : self","args_html":"(value : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/box_blur.cr","line_number":14,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/box_blur.cr#L14"},"def":{"name":"box_blur","args":[{"name":"value","external_name":"value","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"clone.box_blur!(value)"}},{"html_id":"box_blur!(value:Int32):self-instance-method","name":"box_blur!","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32) : self","args_html":"(value : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/box_blur.cr","line_number":18,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/box_blur.cr#L18"},"def":{"name":"box_blur!","args":[{"name":"value","external_name":"value","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"horizontal_blur!(value)\nvertical_blur!(value)\n"}}]},{"html_id":"cr-image/CrImage/Operation/Brightness","path":"CrImage/Operation/Brightness.html","kind":"module","full_name":"CrImage::Operation::Brightness","name":"Brightness","abstract":false,"locations":[{"filename":"src/cr-image/operation/brightness.cr","line_number":11,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/brightness.cr#L11"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Operation","kind":"module","full_name":"CrImage::Operation","name":"Operation"},"doc":"Brightens an image (increases white value)\n\nTaking sample `image`:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman with black turtleneck and white background\"/>\n\n```\nimage.brightness(2.0)\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/brightened_2.0_sample.jpg\" alt=\"Brightened sample image with value 2.0\"/>","summary":"<p>Brightens an image (increases white value)</p>","instance_methods":[{"html_id":"brightness(value:Float64):self-instance-method","name":"brightness","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Float64"}],"args_string":"(value : Float64) : self","args_html":"(value : Float64) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/brightness.cr","line_number":12,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/brightness.cr#L12"},"def":{"name":"brightness","args":[{"name":"value","external_name":"value","restriction":"Float64"}],"return_type":"self","visibility":"Public","body":"clone.brightness!(value)"}},{"html_id":"brightness!(value:Float64):self-instance-method","name":"brightness!","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Float64"}],"args_string":"(value : Float64) : self","args_html":"(value : Float64) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/brightness.cr","line_number":16,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/brightness.cr#L16"},"def":{"name":"brightness!","args":[{"name":"value","external_name":"value","restriction":"Float64"}],"return_type":"self","visibility":"Public","body":"each_channel do |channel|\n  size.times do |index|\n    channel.unsafe_put(index, (Math.min(255, (    (channel.unsafe_fetch(index)) * value))).to_u8)\n  end\nend\nself\n"}}]},{"html_id":"cr-image/CrImage/Operation/ChannelSwap","path":"CrImage/Operation/ChannelSwap.html","kind":"module","full_name":"CrImage::Operation::ChannelSwap","name":"ChannelSwap","abstract":false,"locations":[{"filename":"src/cr-image/operation/channel_swap.cr","line_number":11,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/channel_swap.cr#L11"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Operation","kind":"module","full_name":"CrImage::Operation","name":"Operation"},"doc":"Swaps channels of `ChannelType` supported by an image\n\nTaking sample `image`:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman with black turtleneck and white background\"/>\n\n```\nimage.channel_swap(:green, :red) # Crystal autocasting of symbols to Pluto::ChannelType enum is magic\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/channel_swapped_green_red_sample.jpg\" alt=\"Channel swapped image swapping the green and red channels\"/>","summary":"<p>Swaps channels of <code><a href=\"../../CrImage/ChannelType.html\">ChannelType</a></code> supported by an image</p>","instance_methods":[{"html_id":"channel_swap(a:ChannelType,b:ChannelType):self-instance-method","name":"channel_swap","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"ChannelType"},{"name":"b","external_name":"b","restriction":"ChannelType"}],"args_string":"(a : ChannelType, b : ChannelType) : self","args_html":"(a : <a href=\"../../CrImage/ChannelType.html\">ChannelType</a>, b : <a href=\"../../CrImage/ChannelType.html\">ChannelType</a>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/channel_swap.cr","line_number":12,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/channel_swap.cr#L12"},"def":{"name":"channel_swap","args":[{"name":"a","external_name":"a","restriction":"ChannelType"},{"name":"b","external_name":"b","restriction":"ChannelType"}],"return_type":"self","visibility":"Public","body":"clone.channel_swap!(a, b)"}},{"html_id":"channel_swap!(a:ChannelType,b:ChannelType):self-instance-method","name":"channel_swap!","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"ChannelType"},{"name":"b","external_name":"b","restriction":"ChannelType"}],"args_string":"(a : ChannelType, b : ChannelType) : self","args_html":"(a : <a href=\"../../CrImage/ChannelType.html\">ChannelType</a>, b : <a href=\"../../CrImage/ChannelType.html\">ChannelType</a>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/channel_swap.cr","line_number":16,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/channel_swap.cr#L16"},"def":{"name":"channel_swap!","args":[{"name":"a","external_name":"a","restriction":"ChannelType"},{"name":"b","external_name":"b","restriction":"ChannelType"}],"return_type":"self","visibility":"Public","body":"ch_a, ch_b = self[a], self[b]\nself[a] = ch_b\nself[b] = ch_a\nself\n"}}]},{"html_id":"cr-image/CrImage/Operation/Contrast","path":"CrImage/Operation/Contrast.html","kind":"module","full_name":"CrImage::Operation::Contrast","name":"Contrast","abstract":false,"locations":[{"filename":"src/cr-image/operation/contrast.cr","line_number":11,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/contrast.cr#L11"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Operation","kind":"module","full_name":"CrImage::Operation","name":"Operation"},"doc":"Increases contrast of an image\n\nTaking sample `image`:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman with black turtleneck and white background\"/>\n\n```\nimage.contrast(20)\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/contrasted_20_sample.jpg\" alt=\"Contrasted image with value of 10\"/>","summary":"<p>Increases contrast of an image</p>","instance_methods":[{"html_id":"contrast(value:Float64):self-instance-method","name":"contrast","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Float64"}],"args_string":"(value : Float64) : self","args_html":"(value : Float64) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/contrast.cr","line_number":12,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/contrast.cr#L12"},"def":{"name":"contrast","args":[{"name":"value","external_name":"value","restriction":"Float64"}],"return_type":"self","visibility":"Public","body":"clone.contrast!(value)"}},{"html_id":"contrast!(value:Float64):self-instance-method","name":"contrast!","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Float64"}],"args_string":"(value : Float64) : self","args_html":"(value : Float64) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/contrast.cr","line_number":16,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/contrast.cr#L16"},"def":{"name":"contrast!","args":[{"name":"value","external_name":"value","restriction":"Float64"}],"return_type":"self","visibility":"Public","body":"factor = (259 * (value + 255)) / (255 * (259 - value))\neach_channel do |channel|\n  size.times do |index|\n    channel.unsafe_put(index, (Math.min(255, Math.max(0, (factor * ((channel.unsafe_fetch(index)).to_i - 128)) + 128))).to_u8)\n  end\nend\nself\n"}}]},{"html_id":"cr-image/CrImage/Operation/Crop","path":"CrImage/Operation/Crop.html","kind":"module","full_name":"CrImage::Operation::Crop","name":"Crop","abstract":false,"locations":[{"filename":"src/cr-image/operation/crop.cr","line_number":11,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/crop.cr#L11"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Operation","kind":"module","full_name":"CrImage::Operation","name":"Operation"},"doc":"Crops an image\n\nTaking sample `image`:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman with black turtleneck and white background\"/>\n\n```\nimage.crop(40, 30, 80, 80)\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/crop_40_30_80_80_sample.jpg\" alt=\"Cropped image of woman's face\"/>","summary":"<p>Crops an image</p>","instance_methods":[{"html_id":"[](xrange:Range(Int32,Int32)|Range(Int32,Nil)|Range(Nil,Int32),yrange:Range(Int32,Int32)|Range(Int32,Nil)|Range(Nil,Int32)):self-instance-method","name":"[]","abstract":false,"args":[{"name":"xrange","external_name":"xrange","restriction":"Range(Int32, Int32) | Range(Int32, Nil) | Range(Nil, Int32)"},{"name":"yrange","external_name":"yrange","restriction":"Range(Int32, Int32) | Range(Int32, Nil) | Range(Nil, Int32)"}],"args_string":"(xrange : Range(Int32, Int32) | Range(Int32, Nil) | Range(Nil, Int32), yrange : Range(Int32, Int32) | Range(Int32, Nil) | Range(Nil, Int32)) : self","args_html":"(xrange : Range(Int32, Int32) | Range(Int32, Nil) | Range(Nil, Int32), yrange : Range(Int32, Int32) | Range(Int32, Nil) | Range(Nil, Int32)) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/crop.cr","line_number":20,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/crop.cr#L20"},"def":{"name":"[]","args":[{"name":"xrange","external_name":"xrange","restriction":"Range(Int32, Int32) | Range(Int32, Nil) | Range(Nil, Int32)"},{"name":"yrange","external_name":"yrange","restriction":"Range(Int32, Int32) | Range(Int32, Nil) | Range(Nil, Int32)"}],"return_type":"self","visibility":"Public","body":"xstart, xcount = resolve_to_start_and_count(xrange, width)\nystart, ycount = resolve_to_start_and_count(yrange, height)\ncrop(xstart, ystart, xcount, ycount)\n"}},{"html_id":"crop(x:Int32,y:Int32,new_width:Int32,new_height:Int32):self-instance-method","name":"crop","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"y","external_name":"y","restriction":"Int32"},{"name":"new_width","external_name":"new_width","restriction":"Int32"},{"name":"new_height","external_name":"new_height","restriction":"Int32"}],"args_string":"(x : Int32, y : Int32, new_width : Int32, new_height : Int32) : self","args_html":"(x : Int32, y : Int32, new_width : Int32, new_height : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/crop.cr","line_number":16,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/crop.cr#L16"},"def":{"name":"crop","args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"y","external_name":"y","restriction":"Int32"},{"name":"new_width","external_name":"new_width","restriction":"Int32"},{"name":"new_height","external_name":"new_height","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"clone.crop!(x, y, new_width, new_height)"}},{"html_id":"crop(region:Region):self-instance-method","name":"crop","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"Region"}],"args_string":"(region : Region) : self","args_html":"(region : <a href=\"../../CrImage/Region.html\">Region</a>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/crop.cr","line_number":12,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/crop.cr#L12"},"def":{"name":"crop","args":[{"name":"region","external_name":"region","restriction":"Region"}],"return_type":"self","visibility":"Public","body":"crop(*region.to_tuple)"}},{"html_id":"crop!(x:Int32,y:Int32,new_width:Int32,new_height:Int32):self-instance-method","name":"crop!","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"y","external_name":"y","restriction":"Int32"},{"name":"new_width","external_name":"new_width","restriction":"Int32"},{"name":"new_height","external_name":"new_height","restriction":"Int32"}],"args_string":"(x : Int32, y : Int32, new_width : Int32, new_height : Int32) : self","args_html":"(x : Int32, y : Int32, new_width : Int32, new_height : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/crop.cr","line_number":30,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/crop.cr#L30"},"def":{"name":"crop!","args":[{"name":"x","external_name":"x","restriction":"Int32"},{"name":"y","external_name":"y","restriction":"Int32"},{"name":"new_width","external_name":"new_width","restriction":"Int32"},{"name":"new_height","external_name":"new_height","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"if (x + new_width) > width\n  raise(\"Crop dimensions extend #{(x + new_width) - width} pixels beyond width of the image (#{width})\")\nend\nif (y + new_height) > height\n  raise(\"Crop dimensions extend #{(y + new_height) - height} pixels beyond height of the image (#{height})\")\nend\nnew_size = new_width * new_height\nheight_offset = y * width\neach_channel do |channel, channel_type|\n  resized_channel = Array.new(new_size) do\n    0_u8\n  end\n  new_height.times do |new_y|\n    orig_index = (height_offset + (new_y * width)) + x\n    resized_channel[new_y * new_width, new_width] = channel[orig_index, new_width]\n  end\n  self[channel_type] = resized_channel\nend\n@width = new_width\n@height = new_height\nself\n"}},{"html_id":"crop!(region:Region):self-instance-method","name":"crop!","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"Region"}],"args_string":"(region : Region) : self","args_html":"(region : <a href=\"../../CrImage/Region.html\">Region</a>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/crop.cr","line_number":26,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/crop.cr#L26"},"def":{"name":"crop!","args":[{"name":"region","external_name":"region","restriction":"Region"}],"return_type":"self","visibility":"Public","body":"crop!(*region.to_tuple)"}}]},{"html_id":"cr-image/CrImage/Operation/Draw","path":"CrImage/Operation/Draw.html","kind":"module","full_name":"CrImage::Operation::Draw","name":"Draw","abstract":false,"locations":[{"filename":"src/cr-image/operation/draw.cr","line_number":15,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/draw.cr#L15"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Operation","kind":"module","full_name":"CrImage::Operation","name":"Operation"},"doc":"Draws shapes in the image\n\nTaking sample `image`:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman with black turtleneck and white background\"/>\n\n```\nimage.draw_box(40, 30, 80, 80, CrImage::Color.of(\"#00f\"))\nimage.draw_circle(80, 70, 40, CrImage::Color.of(\"#00f\"))\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/draw_box_40_30_80_80_sample.jpg\" alt=\"Woman with blue box drawn around face\"/>\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/draw_circle_80_70_40_sample.jpg\" alt=\"Woman with blue circle drawn around face\"/>\n\nCan also use the `fill: true` parameter to fill in the drawn shapes","summary":"<p>Draws shapes in the image</p>","instance_methods":[{"html_id":"draw_box(x:Int,y:Int,box_width:Int,box_height:Int,color:Color,*,fill:Bool=false):self-instance-method","name":"draw_box","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"box_width","external_name":"box_width","restriction":"Int"},{"name":"box_height","external_name":"box_height","restriction":"Int"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"}],"args_string":"(x : Int, y : Int, box_width : Int, box_height : Int, color : Color, *, fill : Bool = false) : self","args_html":"(x : Int, y : Int, box_width : Int, box_height : Int, color : <a href=\"../../CrImage/Color.html\">Color</a>, *, fill : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/draw.cr","line_number":20,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/draw.cr#L20"},"def":{"name":"draw_box","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"box_width","external_name":"box_width","restriction":"Int"},{"name":"box_height","external_name":"box_height","restriction":"Int"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"}],"splat_index":5,"return_type":"self","visibility":"Public","body":"clone.draw_box!(x, y, box_width, box_height, color, fill: fill)"}},{"html_id":"draw_box(region:Region,color:Color,*,fill:Bool=false):self-instance-method","name":"draw_box","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"Region"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"}],"args_string":"(region : Region, color : Color, *, fill : Bool = false) : self","args_html":"(region : <a href=\"../../CrImage/Region.html\">Region</a>, color : <a href=\"../../CrImage/Color.html\">Color</a>, *, fill : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/draw.cr","line_number":16,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/draw.cr#L16"},"def":{"name":"draw_box","args":[{"name":"region","external_name":"region","restriction":"Region"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"}],"splat_index":2,"return_type":"self","visibility":"Public","body":"clone.draw_box!(region, color, fill: fill)"}},{"html_id":"draw_box!(x:Int,y:Int,box_width:Int,box_height:Int,color:Color,*,fill:Bool=false):self-instance-method","name":"draw_box!","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"box_width","external_name":"box_width","restriction":"Int"},{"name":"box_height","external_name":"box_height","restriction":"Int"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"}],"args_string":"(x : Int, y : Int, box_width : Int, box_height : Int, color : Color, *, fill : Bool = false) : self","args_html":"(x : Int, y : Int, box_width : Int, box_height : Int, color : <a href=\"../../CrImage/Color.html\">Color</a>, *, fill : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/draw.cr","line_number":28,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/draw.cr#L28"},"def":{"name":"draw_box!","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"box_width","external_name":"box_width","restriction":"Int"},{"name":"box_height","external_name":"box_height","restriction":"Int"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"}],"splat_index":5,"return_type":"self","visibility":"Public","body":"if (x + box_width) > width\n  raise(\"Box dimensions extend #{(x + box_width) - width} pixels beyond width of the image (#{width})\")\nend\nif (y + box_height) > height\n  raise(\"Box dimensions extend #{(y + box_height) - height} pixels beyond height of the image (#{height})\")\nend\nx_i = x.to_i\ny_i = y.to_i\neach_channel do |channel, channel_type|\n  channel[(  (y_i * width) + x_i), box_width] = Array(UInt8).new(box_width) do\n    color[channel_type]\n  end\n  channel[((y_i + box_height) * width) + x_i, box_width] = Array(UInt8).new(box_width) do\n    color[channel_type]\n  end\n  box_height.times do |i|\n    if i == 0\n      next\n    end\n    if fill\n      channel[(      ((y_i + i) * width) + x_i), box_width] = Array(UInt8).new(box_width) do\n        color[channel_type]\n      end\n    else\n      channel.unsafe_put(((y_i + i) * width) + x_i, color[channel_type])\n      channel.unsafe_put((((y_i + i) * width) + x_i) + box_width, color[channel_type])\n    end\n  end\nend\nself\n"}},{"html_id":"draw_box!(region:Region,color:Color,*,fill:Bool=false):self-instance-method","name":"draw_box!","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"Region"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"}],"args_string":"(region : Region, color : Color, *, fill : Bool = false) : self","args_html":"(region : <a href=\"../../CrImage/Region.html\">Region</a>, color : <a href=\"../../CrImage/Color.html\">Color</a>, *, fill : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/draw.cr","line_number":24,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/draw.cr#L24"},"def":{"name":"draw_box!","args":[{"name":"region","external_name":"region","restriction":"Region"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"}],"splat_index":2,"return_type":"self","visibility":"Public","body":"draw_box!(*region.to_tuple, color, fill: fill)"}},{"html_id":"draw_circle(x:Int,y:Int,radius:Int,color:Color,*,fill:Bool=false):self-instance-method","name":"draw_circle","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"radius","external_name":"radius","restriction":"Int"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"}],"args_string":"(x : Int, y : Int, radius : Int, color : Color, *, fill : Bool = false) : self","args_html":"(x : Int, y : Int, radius : Int, color : <a href=\"../../CrImage/Color.html\">Color</a>, *, fill : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/draw.cr","line_number":56,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/draw.cr#L56"},"def":{"name":"draw_circle","args":[{"name":"x","external_name":"x","restriction":"Int"},{"name":"y","external_name":"y","restriction":"Int"},{"name":"radius","external_name":"radius","restriction":"Int"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"}],"splat_index":4,"return_type":"self","visibility":"Public","body":"clone.draw_circle!(x, y, radius, color, fill: fill)"}},{"html_id":"draw_circle(region:Region,radius:Int,color:Color,*,fill:Bool=false):self-instance-method","name":"draw_circle","doc":"Draw a circle around the region's center (see `Region#center`)","summary":"<p>Draw a circle around the region's center (see <code><a href=\"../../CrImage/Region.html#center%3ATuple%28Int32%2CInt32%29-instance-method\">Region#center</a></code>)</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"Region"},{"name":"radius","external_name":"radius","restriction":"Int"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"}],"args_string":"(region : Region, radius : Int, color : Color, *, fill : Bool = false) : self","args_html":"(region : <a href=\"../../CrImage/Region.html\">Region</a>, radius : Int, color : <a href=\"../../CrImage/Color.html\">Color</a>, *, fill : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/draw.cr","line_number":52,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/draw.cr#L52"},"def":{"name":"draw_circle","args":[{"name":"region","external_name":"region","restriction":"Region"},{"name":"radius","external_name":"radius","restriction":"Int"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"}],"splat_index":3,"return_type":"self","visibility":"Public","body":"clone.draw_circle!(*region.center, radius, color, fill: fill)"}},{"html_id":"draw_circle!(region:Region,color:Color,*,fill:Bool=false,radius:Int32|Nil=nil):self-instance-method","name":"draw_circle!","doc":"Draw a circle around the region's center (see `Region#center`)","summary":"<p>Draw a circle around the region's center (see <code><a href=\"../../CrImage/Region.html#center%3ATuple%28Int32%2CInt32%29-instance-method\">Region#center</a></code>)</p>","abstract":false,"args":[{"name":"region","external_name":"region","restriction":"Region"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"},{"name":"radius","default_value":"nil","external_name":"radius","restriction":"Int32 | ::Nil"}],"args_string":"(region : Region, color : Color, *, fill : Bool = false, radius : Int32 | Nil = nil) : self","args_html":"(region : <a href=\"../../CrImage/Region.html\">Region</a>, color : <a href=\"../../CrImage/Color.html\">Color</a>, *, fill : Bool = <span class=\"n\">false</span>, radius : Int32 | Nil = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/draw.cr","line_number":61,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/draw.cr#L61"},"def":{"name":"draw_circle!","args":[{"name":"region","external_name":"region","restriction":"Region"},{"name":"color","external_name":"color","restriction":"Color"},{"name":"","external_name":"","restriction":""},{"name":"fill","default_value":"false","external_name":"fill","restriction":"Bool"},{"name":"radius","default_value":"nil","external_name":"radius","restriction":"Int32 | ::Nil"}],"splat_index":2,"return_type":"self","visibility":"Public","body":"draw_circle!(*region.center, radius, color, fill: fill)"}}]},{"html_id":"cr-image/CrImage/Operation/GaussianBlur","path":"CrImage/Operation/GaussianBlur.html","kind":"module","full_name":"CrImage::Operation::GaussianBlur","name":"GaussianBlur","abstract":false,"locations":[{"filename":"src/cr-image/operation/gaussian_blur.cr","line_number":13,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/gaussian_blur.cr#L13"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Operation","kind":"module","full_name":"CrImage::Operation","name":"Operation"},"doc":"Applies a 3x3 Gaussian blur\n\nTaking sample `image`:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman with black turtleneck and white background\"/>\n\n```\nimage.gaussian_blur(1).save(\"gaussian_1_sample.jpg\")\nimage.gaussian_blur(5).save(\"gaussian_5_sample.jpg\")\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/gaussian_1_sample.jpg\" alt=\"Blurred sample image with value 1\"/>\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/gaussian_5_sample.jpg\" alt=\"Blurred sample image with value 5\"/>","summary":"<p>Applies a 3x3 Gaussian blur</p>","instance_methods":[{"html_id":"gaussian_blur(sigma:Int32):self-instance-method","name":"gaussian_blur","abstract":false,"args":[{"name":"sigma","external_name":"sigma","restriction":"Int32"}],"args_string":"(sigma : Int32) : self","args_html":"(sigma : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/gaussian_blur.cr","line_number":14,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/gaussian_blur.cr#L14"},"def":{"name":"gaussian_blur","args":[{"name":"sigma","external_name":"sigma","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"clone.gaussian_blur!(sigma)"}},{"html_id":"gaussian_blur!(sigma:Int32):self-instance-method","name":"gaussian_blur!","abstract":false,"args":[{"name":"sigma","external_name":"sigma","restriction":"Int32"}],"args_string":"(sigma : Int32) : self","args_html":"(sigma : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/gaussian_blur.cr","line_number":18,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/gaussian_blur.cr#L18"},"def":{"name":"gaussian_blur!","args":[{"name":"sigma","external_name":"sigma","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"n = 3\nw_ideal = Math.sqrt((((12 * sigma) * sigma) / n) + 1)\nw_l = w_ideal.floor.to_i\nif (w_l % 2) == 0\n  w_l = w_l - 1\nend\nm_ideal = (((((12 * sigma) * sigma) - ((n * w_l) * w_l)) - ((4 * n) * w_l)) - (3 * n)) / ((-4 * w_l) - 4)\nm = m_ideal.round\nsizes = [] of Int32\nn.times do |i|\n  sizes << (if i < m\n    w_l\n  else\n    w_l + 2\n  end)\nend\nbox_blur!(((sizes.unsafe_fetch(0)) - 1) // 2)\nbox_blur!(((sizes.unsafe_fetch(1)) - 1) // 2)\nbox_blur!(((sizes.unsafe_fetch(2)) - 1) // 2)\nself\n"}}]},{"html_id":"cr-image/CrImage/Operation/HorizontalBlur","path":"CrImage/Operation/HorizontalBlur.html","kind":"module","full_name":"CrImage::Operation::HorizontalBlur","name":"HorizontalBlur","abstract":false,"locations":[{"filename":"src/cr-image/operation/horizontal_blur.cr","line_number":13,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/horizontal_blur.cr#L13"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Operation","kind":"module","full_name":"CrImage::Operation","name":"Operation"},"doc":"Blur an image along the horizontal axis\n\nTaking sample `image`:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman with black turtleneck and white background\"/>\n\n```\nimage.horizontal_blur(1).save(\"horizontal_1_sample.jpg\")\nimage.horizontal_blur(5).save(\"horizontal_5_sample.jpg\")\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/horizontal_1_sample.jpg\" alt=\"Blurred sample image with value 1\"/>\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/horizontal_5_sample.jpg\" alt=\"Blurred sample image with value 5\"/>","summary":"<p>Blur an image along the horizontal axis</p>","instance_methods":[{"html_id":"horizontal_blur(value:Int32):self-instance-method","name":"horizontal_blur","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32) : self","args_html":"(value : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/horizontal_blur.cr","line_number":14,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/horizontal_blur.cr#L14"},"def":{"name":"horizontal_blur","args":[{"name":"value","external_name":"value","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"clone.horizontal_blur!(value)"}},{"html_id":"horizontal_blur!(value:Int32):self-instance-method","name":"horizontal_blur!","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32) : self","args_html":"(value : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/horizontal_blur.cr","line_number":18,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/horizontal_blur.cr#L18"},"def":{"name":"horizontal_blur!","args":[{"name":"value","external_name":"value","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"buffer = Bytes.new(size, 0)\nmultiplier = 1 / ((value + value) + 1)\neach_channel do |channel|\n  @height.times do |y|\n    c_index : Int32 = y * @width\n    l_index : Int32 = c_index\n    r_index : Int32 = c_index + value\n    f_value : Int32 = (channel.unsafe_fetch(c_index)).to_i\n    l_value : Int32 = (channel.unsafe_fetch((c_index + @width) - 1)).to_i\n    c_value : Int32 = (value + 1) * f_value\n    (0..(value - 1)).each do\n      c_value = c_value + (channel.unsafe_fetch(c_index))\n    end\n    (0..value).each do\n      c_value = c_value + ((channel.unsafe_fetch(r_index)).to_i - f_value)\n      buffer.unsafe_put(c_index, ((c_value * multiplier).clamp(0, 255)).to_u8)\n      r_index = r_index + 1\n      c_index = c_index + 1\n    end\n    ((value + 1)..((@width - value) - 1)).each do\n      c_value = c_value + ((channel.unsafe_fetch(r_index)).to_i - (channel.unsafe_fetch(l_index)).to_i)\n      buffer.unsafe_put(c_index, ((c_value * multiplier).clamp(0, 255)).to_u8)\n      r_index = r_index + 1\n      l_index = l_index + 1\n      c_index = c_index + 1\n    end\n    ((@width - value)..(@width - 1)).each do\n      c_value = c_value + (l_value - (channel.unsafe_fetch(l_index)).to_i)\n      buffer.unsafe_put(c_index, ((c_value * multiplier).clamp(0, 255)).to_u8)\n      l_index = l_index + 1\n      c_index = c_index + 1\n    end\n  end\n  (channel.@buffer).copy_from(buffer.to_unsafe, buffer.size)\nend\nself\n"}}]},{"html_id":"cr-image/CrImage/Operation/MaskApply","path":"CrImage/Operation/MaskApply.html","kind":"module","full_name":"CrImage::Operation::MaskApply","name":"MaskApply","abstract":false,"locations":[{"filename":"src/cr-image/operation/mask_apply.cr","line_number":24,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/mask_apply.cr#L24"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Operation","kind":"module","full_name":"CrImage::Operation","name":"Operation"},"doc":"Apply a mask to an image\n\nTaking sample `image`:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman with black turtleneck and white background\"/>\n\nAnd mask\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/apply_mask_mask.jpg\" alt=\"Black box with thin horizontal white box at eye level\"/>\n\n```\nmask = CrImage::Mask.new(image, false)\nmask[50..90, 65..75] = true\nmask.to_gray.save(\"apply_mask_mask.jpg\")\nimage.apply(mask).save(\"apply_mask.jpg\")\nimage.apply_color(mask, CrImage::Color.of(\"#00f\")).save(\"apply_mask_color.jpg\")\nimage.apply(mask) do |x, y, pixel, channel_type|\n  Math.min(255, pixel + 50).to_u8 if channel_type == :blue\nend.save(\"apply_mask_block.jpg\")\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/apply_mask.jpg\" alt=\"Image is blacked out other than thin horizontal bar of the woman's eyes\"/>\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/apply_mask_color.jpg\" alt=\"Thin horizontal blue bar over woman's eyes\"/>\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/apply_mask_block.jpg\" alt=\"Thin horizantal transparent blue bar over woman's eyes\"/>","summary":"<p>Apply a mask to an image</p>","instance_methods":[{"html_id":"apply(mask:Mask):self-instance-method","name":"apply","abstract":false,"args":[{"name":"mask","external_name":"mask","restriction":"Mask"}],"args_string":"(mask : Mask) : self","args_html":"(mask : <a href=\"../../CrImage/Mask.html\">Mask</a>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/mask_apply.cr","line_number":25,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/mask_apply.cr#L25"},"def":{"name":"apply","args":[{"name":"mask","external_name":"mask","restriction":"Mask"}],"return_type":"self","visibility":"Public","body":"clone.apply!(mask)"}},{"html_id":"apply(mask:Mask,&block:Int32,Int32,UInt8,ChannelType->UInt8|Nil):self-instance-method","name":"apply","abstract":false,"args":[{"name":"mask","external_name":"mask","restriction":"Mask"}],"args_string":"(mask : Mask, &block : Int32, Int32, UInt8, ChannelType -> UInt8 | Nil) : self","args_html":"(mask : <a href=\"../../CrImage/Mask.html\">Mask</a>, &block : Int32, Int32, UInt8, <a href=\"../../CrImage/ChannelType.html\">ChannelType</a> -> UInt8 | Nil) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/mask_apply.cr","line_number":29,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/mask_apply.cr#L29"},"def":{"name":"apply","args":[{"name":"mask","external_name":"mask","restriction":"Mask"}],"yields":4,"block_arity":4,"block_arg":{"name":"block","external_name":"block","restriction":"(Int32, Int32, UInt8, ChannelType -> UInt8 | ::Nil)"},"return_type":"self","visibility":"Public","body":"clone.apply!(mask, &block)"}},{"html_id":"apply!(mask:Mask):self-instance-method","name":"apply!","doc":"TODO: add apply version that accepts 1+ ChannelType that the mask should apply to (i.e. make a background completely transparent, not just transparent black)","summary":"<p><span class=\"flag orange\">TODO</span>  add apply version that accepts 1+ ChannelType that the mask should apply to (i.e.</p>","abstract":false,"args":[{"name":"mask","external_name":"mask","restriction":"Mask"}],"args_string":"(mask : Mask) : self","args_html":"(mask : <a href=\"../../CrImage/Mask.html\">Mask</a>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/mask_apply.cr","line_number":38,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/mask_apply.cr#L38"},"def":{"name":"apply!","args":[{"name":"mask","external_name":"mask","restriction":"Mask"}],"return_type":"self","visibility":"Public","body":"if (mask.width == width) && (mask.height == height)\nelse\n  raise(\"Mask of #{mask.width}x#{mask.height} doesn't match image dimensions #{width}x#{height}\")\nend\neach_channel do |channel|\n  channel.map_with_index! do |pixel, i|\n    mask.at(i) ? pixel : 0_u8\n  end\nend\nself\n"}},{"html_id":"apply!(mask:Mask,&block:Int32,Int32,UInt8,ChannelType->UInt8|Nil):self-instance-method","name":"apply!","abstract":false,"args":[{"name":"mask","external_name":"mask","restriction":"Mask"}],"args_string":"(mask : Mask, &block : Int32, Int32, UInt8, ChannelType -> UInt8 | Nil) : self","args_html":"(mask : <a href=\"../../CrImage/Mask.html\">Mask</a>, &block : Int32, Int32, UInt8, <a href=\"../../CrImage/ChannelType.html\">ChannelType</a> -> UInt8 | Nil) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/mask_apply.cr","line_number":47,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/mask_apply.cr#L47"},"def":{"name":"apply!","args":[{"name":"mask","external_name":"mask","restriction":"Mask"}],"yields":4,"block_arity":4,"block_arg":{"name":"block","external_name":"block","restriction":"(Int32, Int32, UInt8, ChannelType -> UInt8 | ::Nil)"},"return_type":"self","visibility":"Public","body":"if (mask.width == width) && (mask.height == height)\nelse\n  raise(\"Mask of #{mask.width}x#{mask.height} doesn't match image dimensions #{width}x#{height}\")\nend\neach_channel do |channel, channel_type|\n  channel.map_with_index! do |pixel, i|\n    mask.at(i) ? (block.call(i % width, i // width, pixel, channel_type)) || pixel : pixel\n  end\nend\nself\n"}},{"html_id":"apply_color(mask:Mask,color:Color):self-instance-method","name":"apply_color","abstract":false,"args":[{"name":"mask","external_name":"mask","restriction":"Mask"},{"name":"color","external_name":"color","restriction":"Color"}],"args_string":"(mask : Mask, color : Color) : self","args_html":"(mask : <a href=\"../../CrImage/Mask.html\">Mask</a>, color : <a href=\"../../CrImage/Color.html\">Color</a>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/mask_apply.cr","line_number":33,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/mask_apply.cr#L33"},"def":{"name":"apply_color","args":[{"name":"mask","external_name":"mask","restriction":"Mask"},{"name":"color","external_name":"color","restriction":"Color"}],"return_type":"self","visibility":"Public","body":"clone.apply_color!(mask, color)"}},{"html_id":"apply_color!(mask:Mask,color:Color):self-instance-method","name":"apply_color!","abstract":false,"args":[{"name":"mask","external_name":"mask","restriction":"Mask"},{"name":"color","external_name":"color","restriction":"Color"}],"args_string":"(mask : Mask, color : Color) : self","args_html":"(mask : <a href=\"../../CrImage/Mask.html\">Mask</a>, color : <a href=\"../../CrImage/Color.html\">Color</a>) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/mask_apply.cr","line_number":58,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/mask_apply.cr#L58"},"def":{"name":"apply_color!","args":[{"name":"mask","external_name":"mask","restriction":"Mask"},{"name":"color","external_name":"color","restriction":"Color"}],"return_type":"self","visibility":"Public","body":"apply!(mask) do |_, _, _, channel_type|\n  color[channel_type]\nend"}}]},{"html_id":"cr-image/CrImage/Operation/VerticalBlur","path":"CrImage/Operation/VerticalBlur.html","kind":"module","full_name":"CrImage::Operation::VerticalBlur","name":"VerticalBlur","abstract":false,"locations":[{"filename":"src/cr-image/operation/vertical_blur.cr","line_number":13,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/vertical_blur.cr#L13"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"cr-image/CrImage/GrayscaleImage","kind":"class","full_name":"CrImage::GrayscaleImage","name":"GrayscaleImage"},{"html_id":"cr-image/CrImage/RGBAImage","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage"}],"namespace":{"html_id":"cr-image/CrImage/Operation","kind":"module","full_name":"CrImage::Operation","name":"Operation"},"doc":"Blur an image along the vertical axis\n\nTaking sample `image`:\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman with black turtleneck and white background\"/>\n\n```\nimage.vertical_blur(1).save(\"vertical_1_sample.jpg\")\nimage.vertical_blur(5).save(\"vertical_5_sample.jpg\")\n```\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/vertical_1_sample.jpg\" alt=\"Blurred sample image with value 1\"/>\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/vertical_5_sample.jpg\" alt=\"Blurred sample image with value 5\"/>","summary":"<p>Blur an image along the vertical axis</p>","instance_methods":[{"html_id":"vertical_blur(value:Int32):self-instance-method","name":"vertical_blur","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32) : self","args_html":"(value : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/vertical_blur.cr","line_number":14,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/vertical_blur.cr#L14"},"def":{"name":"vertical_blur","args":[{"name":"value","external_name":"value","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"clone.vertical_blur!(value)"}},{"html_id":"vertical_blur!(value:Int32):self-instance-method","name":"vertical_blur!","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32) : self","args_html":"(value : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/cr-image/operation/vertical_blur.cr","line_number":18,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/operation/vertical_blur.cr#L18"},"def":{"name":"vertical_blur!","args":[{"name":"value","external_name":"value","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"buffer = Bytes.new(size, 0)\nmultiplier = 1 / ((value + value) + 1)\neach_channel do |channel|\n  @width.times do |x|\n    c_index : Int32 = x\n    l_index : Int32 = c_index\n    r_index : Int32 = c_index + (value * @width)\n    f_value : Int32 = (channel.unsafe_fetch(c_index)).to_i\n    l_value : Int32 = (channel.unsafe_fetch(c_index + (@width * (@height - 1)))).to_i\n    c_value : Int32 = (value + 1) * f_value\n    (0..(value - 1)).each do\n      c_value = c_value + (channel.unsafe_fetch(c_index))\n    end\n    (0..value).each do\n      c_value = c_value + ((channel.unsafe_fetch(r_index)).to_i - f_value)\n      buffer.unsafe_put(c_index, ((c_value * multiplier).clamp(0, 255)).to_u8)\n      r_index = r_index + @width\n      c_index = c_index + @width\n    end\n    ((value + 1)..((@height - value) - 1)).each do\n      c_value = c_value + ((channel.unsafe_fetch(r_index)).to_i - (channel.unsafe_fetch(l_index)).to_i)\n      buffer.unsafe_put(c_index, ((c_value * multiplier).clamp(0, 255)).to_u8)\n      l_index = l_index + @width\n      r_index = r_index + @width\n      c_index = c_index + @width\n    end\n    ((@height - value)..(@height - 1)).each do\n      c_value = c_value + (l_value - (channel.unsafe_fetch(l_index)).to_i)\n      buffer.unsafe_put(c_index, ((c_value * multiplier).clamp(0, 255)).to_u8)\n      l_index = l_index + @width\n      c_index = c_index + @width\n    end\n  end\n  (channel.@buffer).copy_from(buffer.to_unsafe, buffer.size)\nend\nself\n"}}]}]},{"html_id":"cr-image/CrImage/Region","path":"CrImage/Region.html","kind":"struct","full_name":"CrImage::Region","name":"Region","abstract":false,"superclass":{"html_id":"cr-image/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"cr-image/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"cr-image/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"cr-image/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-image/region.cr","line_number":5,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/region.cr#L5"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"cr-image/CrImage","kind":"module","full_name":"CrImage","name":"CrImage"},"doc":"Represents a rectangular area on an `Image` from its upper left corner `x` and `y` coordinates, and a width and height.\n\nSee `Operation::Crop#crop` and `Operation::Draw#draw_box` for examples using it.","summary":"<p>Represents a rectangular area on an <code><a href=\"../CrImage/Image.html\">Image</a></code> from its upper left corner <code><a href=\"../CrImage/Region.html#x%3AUInt16-instance-method\">#x</a></code> and <code><a href=\"../CrImage/Region.html#y%3AUInt16-instance-method\">#y</a></code> coordinates, and a width and height.</p>","constructors":[{"html_id":"center(x:UInt16,y:UInt16,width:UInt16,height:UInt16):Region-class-method","name":"center","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"UInt16"},{"name":"y","external_name":"y","restriction":"UInt16"},{"name":"width","external_name":"width","restriction":"UInt16"},{"name":"height","external_name":"height","restriction":"UInt16"}],"args_string":"(x : UInt16, y : UInt16, width : UInt16, height : UInt16) : Region","args_html":"(x : UInt16, y : UInt16, width : UInt16, height : UInt16) : <a href=\"../CrImage/Region.html\">Region</a>","location":{"filename":"src/cr-image/region.cr","line_number":11,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/region.cr#L11"},"def":{"name":"center","args":[{"name":"x","external_name":"x","restriction":"UInt16"},{"name":"y","external_name":"y","restriction":"UInt16"},{"name":"width","external_name":"width","restriction":"UInt16"},{"name":"height","external_name":"height","restriction":"UInt16"}],"return_type":"Region","visibility":"Public","body":"new(x - (width // 2), y - (height // 2), width, height)"}},{"html_id":"new(x:UInt16,y:UInt16,width:UInt16,height:UInt16)-class-method","name":"new","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"UInt16"},{"name":"y","external_name":"y","restriction":"UInt16"},{"name":"width","external_name":"width","restriction":"UInt16"},{"name":"height","external_name":"height","restriction":"UInt16"}],"args_string":"(x : UInt16, y : UInt16, width : UInt16, height : UInt16)","args_html":"(x : UInt16, y : UInt16, width : UInt16, height : UInt16)","location":{"filename":"src/cr-image/region.cr","line_number":5,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/region.cr#L5"},"def":{"name":"new","args":[{"name":"x","external_name":"x","restriction":"UInt16"},{"name":"y","external_name":"y","restriction":"UInt16"},{"name":"width","external_name":"width","restriction":"UInt16"},{"name":"height","external_name":"height","restriction":"UInt16"}],"visibility":"Public","body":"_ = allocate\n_.initialize(x, y, width, height)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"center:Tuple(Int32,Int32)-instance-method","name":"center","doc":"Return the `{x, y}` tuple of the center coordinates of this `Region`","summary":"<p>Return the <code>{x, y}</code> tuple of the center coordinates of this <code><a href=\"../CrImage/Region.html\">Region</a></code></p>","abstract":false,"location":{"filename":"src/cr-image/region.cr","line_number":21,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/region.cr#L21"},"def":{"name":"center","return_type":"Tuple(Int32, Int32)","visibility":"Public","body":"{(width.to_i // 2) + x.to_i, (height.to_i // 2) + y.to_i}"}},{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/cr-image/region.cr","line_number":5,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/region.cr#L5"},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@x.clone, @y.clone, @width.clone, @height.clone)"}},{"html_id":"copy_with(x_x=@x,y_y=@y,width_width=@width,height_height=@height)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_x","default_value":"@x","external_name":"x","restriction":""},{"name":"_y","default_value":"@y","external_name":"y","restriction":""},{"name":"_width","default_value":"@width","external_name":"width","restriction":""},{"name":"_height","default_value":"@height","external_name":"height","restriction":""}],"args_string":"(x _x = @x, y _y = @y, width _width = @width, height _height = @height)","args_html":"(x _x = @x, y _y = @y, width _width = @width, height _height = @height)","location":{"filename":"src/cr-image/region.cr","line_number":5,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/region.cr#L5"},"def":{"name":"copy_with","args":[{"name":"_x","default_value":"@x","external_name":"x","restriction":""},{"name":"_y","default_value":"@y","external_name":"y","restriction":""},{"name":"_width","default_value":"@width","external_name":"width","restriction":""},{"name":"_height","default_value":"@height","external_name":"height","restriction":""}],"visibility":"Public","body":"self.class.new(_x, _y, _width, _height)"}},{"html_id":"crop(image:Image):Image-instance-method","name":"crop","doc":"Crop a provided `Image` with this region, using `Operation::Crop#crop`","summary":"<p>Crop a provided <code><a href=\"../CrImage/Image.html\">Image</a></code> with this region, using <code><a href=\"../CrImage/Operation/Crop.html#crop%28x%3AInt32%2Cy%3AInt32%2Cnew_width%3AInt32%2Cnew_height%3AInt32%29%3Aself-instance-method\">Operation::Crop#crop</a></code></p>","abstract":false,"args":[{"name":"image","external_name":"image","restriction":"Image"}],"args_string":"(image : Image) : Image","args_html":"(image : <a href=\"../CrImage/Image.html\">Image</a>) : <a href=\"../CrImage/Image.html\">Image</a>","location":{"filename":"src/cr-image/region.cr","line_number":16,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/region.cr#L16"},"def":{"name":"crop","args":[{"name":"image","external_name":"image","restriction":"Image"}],"return_type":"Image","visibility":"Public","body":"image.crop(self)"}},{"html_id":"height:UInt16-instance-method","name":"height","abstract":false,"def":{"name":"height","return_type":"UInt16","visibility":"Public","body":"@height"}},{"html_id":"to_tuple:Tuple(Int32,Int32,Int32,Int32)-instance-method","name":"to_tuple","doc":"Return this `Region` as a `x`, `y`, `width`, and `height` tuple","summary":"<p>Return this <code><a href=\"../CrImage/Region.html\">Region</a></code> as a <code><a href=\"../CrImage/Region.html#x%3AUInt16-instance-method\">#x</a></code>, <code><a href=\"../CrImage/Region.html#y%3AUInt16-instance-method\">#y</a></code>, <code><a href=\"../CrImage/Region.html#width%3AUInt16-instance-method\">#width</a></code>, and <code><a href=\"../CrImage/Region.html#height%3AUInt16-instance-method\">#height</a></code> tuple</p>","abstract":false,"location":{"filename":"src/cr-image/region.cr","line_number":26,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/region.cr#L26"},"def":{"name":"to_tuple","return_type":"Tuple(Int32, Int32, Int32, Int32)","visibility":"Public","body":"{x.to_i, y.to_i, width.to_i, height.to_i}"}},{"html_id":"width:UInt16-instance-method","name":"width","abstract":false,"def":{"name":"width","return_type":"UInt16","visibility":"Public","body":"@width"}},{"html_id":"x:UInt16-instance-method","name":"x","abstract":false,"def":{"name":"x","return_type":"UInt16","visibility":"Public","body":"@x"}},{"html_id":"y:UInt16-instance-method","name":"y","abstract":false,"def":{"name":"y","return_type":"UInt16","visibility":"Public","body":"@y"}}]},{"html_id":"cr-image/CrImage/RGBAImage","path":"CrImage/RGBAImage.html","kind":"class","full_name":"CrImage::RGBAImage","name":"RGBAImage","abstract":false,"superclass":{"html_id":"cr-image/CrImage/Image","kind":"class","full_name":"CrImage::Image","name":"Image"},"ancestors":[{"html_id":"cr-image/CrImage/Operation/MaskApply","kind":"module","full_name":"CrImage::Operation::MaskApply","name":"MaskApply"},{"html_id":"cr-image/CrImage/Format/Save","kind":"module","full_name":"CrImage::Format::Save","name":"Save"},{"html_id":"cr-image/CrImage/Operation/Draw","kind":"module","full_name":"CrImage::Operation::Draw","name":"Draw"},{"html_id":"cr-image/CrImage/Operation/Crop","kind":"module","full_name":"CrImage::Operation::Crop","name":"Crop"},{"html_id":"cr-image/CrImage/Operation/VerticalBlur","kind":"module","full_name":"CrImage::Operation::VerticalBlur","name":"VerticalBlur"},{"html_id":"cr-image/CrImage/Operation/HorizontalBlur","kind":"module","full_name":"CrImage::Operation::HorizontalBlur","name":"HorizontalBlur"},{"html_id":"cr-image/CrImage/Operation/GaussianBlur","kind":"module","full_name":"CrImage::Operation::GaussianBlur","name":"GaussianBlur"},{"html_id":"cr-image/CrImage/Operation/Contrast","kind":"module","full_name":"CrImage::Operation::Contrast","name":"Contrast"},{"html_id":"cr-image/CrImage/Operation/ChannelSwap","kind":"module","full_name":"CrImage::Operation::ChannelSwap","name":"ChannelSwap"},{"html_id":"cr-image/CrImage/Operation/Brightness","kind":"module","full_name":"CrImage::Operation::Brightness","name":"Brightness"},{"html_id":"cr-image/CrImage/Operation/BoxBlur","kind":"module","full_name":"CrImage::Operation::BoxBlur","name":"BoxBlur"},{"html_id":"cr-image/CrImage/Operation/BilinearResize","kind":"module","full_name":"CrImage::Operation::BilinearResize","name":"BilinearResize"},{"html_id":"cr-image/CrImage/Format/PNG","kind":"module","full_name":"CrImage::Format::PNG","name":"PNG"},{"html_id":"cr-image/CrImage/Format/WebP","kind":"module","full_name":"CrImage::Format::WebP","name":"WebP"},{"html_id":"cr-image/CrImage/Format/PPM","kind":"module","full_name":"CrImage::Format::PPM","name":"PPM"},{"html_id":"cr-image/CrImage/Format/JPEG","kind":"module","full_name":"CrImage::Format::JPEG","name":"JPEG"},{"html_id":"cr-image/CrImage/Image","kind":"class","full_name":"CrImage::Image","name":"Image"},{"html_id":"cr-image/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"cr-image/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-image/rgba_image.cr","line_number":7,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L7"}],"repository_name":"cr-image","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"cr-image/CrImage/Format/JPEG","kind":"module","full_name":"CrImage::Format::JPEG","name":"JPEG"},{"html_id":"cr-image/CrImage/Format/PNG","kind":"module","full_name":"CrImage::Format::PNG","name":"PNG"},{"html_id":"cr-image/CrImage/Format/PPM","kind":"module","full_name":"CrImage::Format::PPM","name":"PPM"},{"html_id":"cr-image/CrImage/Format/Save","kind":"module","full_name":"CrImage::Format::Save","name":"Save"},{"html_id":"cr-image/CrImage/Format/WebP","kind":"module","full_name":"CrImage::Format::WebP","name":"WebP"},{"html_id":"cr-image/CrImage/Operation/BilinearResize","kind":"module","full_name":"CrImage::Operation::BilinearResize","name":"BilinearResize"},{"html_id":"cr-image/CrImage/Operation/BoxBlur","kind":"module","full_name":"CrImage::Operation::BoxBlur","name":"BoxBlur"},{"html_id":"cr-image/CrImage/Operation/Brightness","kind":"module","full_name":"CrImage::Operation::Brightness","name":"Brightness"},{"html_id":"cr-image/CrImage/Operation/ChannelSwap","kind":"module","full_name":"CrImage::Operation::ChannelSwap","name":"ChannelSwap"},{"html_id":"cr-image/CrImage/Operation/Contrast","kind":"module","full_name":"CrImage::Operation::Contrast","name":"Contrast"},{"html_id":"cr-image/CrImage/Operation/Crop","kind":"module","full_name":"CrImage::Operation::Crop","name":"Crop"},{"html_id":"cr-image/CrImage/Operation/Draw","kind":"module","full_name":"CrImage::Operation::Draw","name":"Draw"},{"html_id":"cr-image/CrImage/Operation/GaussianBlur","kind":"module","full_name":"CrImage::Operation::GaussianBlur","name":"GaussianBlur"},{"html_id":"cr-image/CrImage/Operation/HorizontalBlur","kind":"module","full_name":"CrImage::Operation::HorizontalBlur","name":"HorizontalBlur"},{"html_id":"cr-image/CrImage/Operation/MaskApply","kind":"module","full_name":"CrImage::Operation::MaskApply","name":"MaskApply"},{"html_id":"cr-image/CrImage/Operation/VerticalBlur","kind":"module","full_name":"CrImage::Operation::VerticalBlur","name":"VerticalBlur"}],"extended_modules":[{"html_id":"cr-image/CrImage/Format/Open","kind":"module","full_name":"CrImage::Format::Open","name":"Open"}],"namespace":{"html_id":"cr-image/CrImage","kind":"module","full_name":"CrImage","name":"CrImage"},"doc":"An image with red, green, blue, and alpha color channels (i.e. a color image). This image type is likely the one read from and written to file (or `IO`).","summary":"<p>An image with red, green, blue, and alpha color channels (i.e.</p>","constructors":[{"html_id":"from_jpeg(image_data:Bytes):self-class-method","name":"from_jpeg","doc":"Read `image_data` as JPEG encoded bytes","summary":"<p>Read <code>image_data</code> as JPEG encoded bytes</p>","abstract":false,"args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"args_string":"(image_data : Bytes) : self","args_html":"(image_data : Bytes) : <span class=\"k\">self</span>","def":{"name":"from_jpeg","args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"return_type":"self","visibility":"Public","body":"handle = LibJPEGTurbo.init_decompress\ncheck_jpeg(handle, LibJPEGTurbo.decompress_header3(handle, image_data, image_data.size, out width, out height, out _subsampling, out _colorspace))\nbuffer = Bytes.new((width * height) * 3, 0)\ncheck_jpeg(handle, LibJPEGTurbo.decompress2(handle, image_data, LibC::ULong.new(image_data.size), buffer, width, 0, height, LibJPEGTurbo::PixelFormat::RGB, 0))\ncheck_jpeg(handle, LibJPEGTurbo.destroy(handle))\nred = Array.new(width * height) do\n  0_u8\nend\ngreen = Array.new(width * height) do\n  0_u8\nend\nblue = Array.new(width * height) do\n  0_u8\nend\nalpha = Array.new(width * height) do\n  255_u8\nend\n(width * height).times do |index|\n  red.unsafe_put(index, buffer[index * 3])\n  green.unsafe_put(index, buffer[(index * 3) + 1])\n  blue.unsafe_put(index, buffer[(index * 3) + 2])\nend\nnew(red, green, blue, alpha, width, height)\n"}},{"html_id":"from_jpeg(io:IO):self-class-method","name":"from_jpeg","doc":"Construct an Image from reading in bytes from `io`","summary":"<p>Construct an Image from reading in bytes from <code>io</code></p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : self","args_html":"(io : IO) : <span class=\"k\">self</span>","def":{"name":"from_jpeg","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"self","visibility":"Public","body":"from_jpeg(io.getb_to_end)"}},{"html_id":"from_png(image_data:Bytes):self-class-method","name":"from_png","doc":"Read `image_data` and PNG encoded bytes","summary":"<p>Read <code>image_data</code> and PNG encoded bytes</p>","abstract":false,"args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"args_string":"(image_data : Bytes) : self","args_html":"(image_data : Bytes) : <span class=\"k\">self</span>","def":{"name":"from_png","args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"return_type":"self","visibility":"Public","body":"ctx = LibSPNG.ctx_new(LibSPNG::CtxFlags::None)\nif ctx\nelse\n  raise(::CrImage::Exception.new(\"Failed to create a context\"))\nend\nLibSPNG.set_png_buffer(ctx, image_data, image_data.size)\ncheck_png(LibSPNG.get_ihdr(ctx, out ihdr))\ncheck_png(LibSPNG.decoded_image_size(ctx, LibSPNG::Format::RGBA8, out image_size))\nimage = Bytes.new(image_size.to_i, 0_u8)\ncheck_png(LibSPNG.decode_image(ctx, image, image_size, LibSPNG::Format::RGBA8, LibSPNG::DecodeFlags::None))\nLibSPNG.ctx_free(ctx)\nsize = image_size // 4\nwidth = size // ihdr.height\nheight = ihdr.height\nred = Array.new(size) do\n  0_u8\nend\ngreen = Array.new(size) do\n  0_u8\nend\nblue = Array.new(size) do\n  0_u8\nend\nalpha = Array.new(size) do\n  0_u8\nend\nsize.times do |index|\n  position = index * 4\n  red.unsafe_put(index, image[position + 0])\n  green.unsafe_put(index, image[position + 1])\n  blue.unsafe_put(index, image[position + 2])\n  alpha.unsafe_put(index, image[position + 3])\nend\nnew(red, green, blue, alpha, width.to_i, height.to_i)\n"}},{"html_id":"from_png(io:IO):self-class-method","name":"from_png","doc":"Construct an Image by reading bytes from `io`","summary":"<p>Construct an Image by reading bytes from <code>io</code></p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : self","args_html":"(io : IO) : <span class=\"k\">self</span>","def":{"name":"from_png","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"self","visibility":"Public","body":"from_png(io.getb_to_end)"}},{"html_id":"from_ppm(image_data:Bytes):self-class-method","name":"from_ppm","doc":"Read `image_data` as PPM encoded bytes","summary":"<p>Read <code>image_data</code> as PPM encoded bytes</p>","abstract":false,"args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"args_string":"(image_data : Bytes) : self","args_html":"(image_data : Bytes) : <span class=\"k\">self</span>","def":{"name":"from_ppm","args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"return_type":"self","visibility":"Public","body":"from_ppm(IO::Memory.new(image_data))"}},{"html_id":"from_ppm(io:IO):self-class-method","name":"from_ppm","doc":"Read bytes from `io` as PPM encoded","summary":"<p>Read bytes from <code>io</code> as PPM encoded</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : self","args_html":"(io : IO) : <span class=\"k\">self</span>","def":{"name":"from_ppm","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"self","visibility":"Public","body":"_magic_number = io.gets(\"\\n\", chomp: true)\nwidth = (io.gets(\" \", chomp: true)).try(&.to_i)\nheight = (io.gets(\"\\n\", chomp: true)).try(&.to_i)\n_maximum_color_value = io.gets(\"\\n\", chomp: true)\nif width && height\n  red = Array.new(width * height) do\n    0_u8\n  end\n  green = Array.new(width * height) do\n    0_u8\n  end\n  blue = Array.new(width * height) do\n    0_u8\n  end\n  alpha = Array.new(width * height) do\n    255_u8\n  end\n  (width * height).times do |index|\n    red_byte = io.read_byte\n    green_byte = io.read_byte\n    blue_byte = io.read_byte\n    if (red_byte && green_byte) && blue_byte\n      red.unsafe_put(index, red_byte)\n      green.unsafe_put(index, green_byte)\n      blue.unsafe_put(index, blue_byte)\n    else\n      raise(\"The image ends prematurely\")\n    end\n  end\n  new(red, green, blue, alpha, width, height)\nelse\n  raise(\"The image doesn't have width or height\")\nend\n"}},{"html_id":"from_webp(image_data:Bytes):self-class-method","name":"from_webp","doc":"Read `image_data` as WebP encoded bytes","summary":"<p>Read <code>image_data</code> as WebP encoded bytes</p>","abstract":false,"args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"args_string":"(image_data : Bytes) : self","args_html":"(image_data : Bytes) : <span class=\"k\">self</span>","def":{"name":"from_webp","args":[{"name":"image_data","external_name":"image_data","restriction":"Bytes"}],"return_type":"self","visibility":"Public","body":"check_webp(LibWebP.get_info(image_data, image_data.size, out width, out height))\nbuffer = LibWebP.decode_rgba(image_data, image_data.size, pointerof(width), pointerof(height))\nred = Array.new(width * height) do\n  0_u8\nend\ngreen = Array.new(width * height) do\n  0_u8\nend\nblue = Array.new(width * height) do\n  0_u8\nend\nalpha = Array.new(width * height) do\n  0_u8\nend\n(width * height).times do |index|\n  red.unsafe_put(index, buffer[index * 4])\n  green.unsafe_put(index, buffer[(index * 4) + 1])\n  blue.unsafe_put(index, buffer[(index * 4) + 2])\n  alpha.unsafe_put(index, buffer[(index * 4) + 3])\nend\nLibWebP.free(buffer)\nnew(red, green, blue, alpha, width, height)\n"}},{"html_id":"from_webp(io:IO):self-class-method","name":"from_webp","doc":"Read bytes from `io` as WebP encoded","summary":"<p>Read bytes from <code>io</code> as WebP encoded</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : self","args_html":"(io : IO) : <span class=\"k\">self</span>","def":{"name":"from_webp","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"self","visibility":"Public","body":"from_webp(io.getb_to_end)"}},{"html_id":"new(red:Array(UInt8),green:Array(UInt8),blue:Array(UInt8),alpha:Array(UInt8),width:Int32,height:Int32)-class-method","name":"new","abstract":false,"args":[{"name":"red","external_name":"red","restriction":"::Array(::UInt8)"},{"name":"green","external_name":"green","restriction":"::Array(::UInt8)"},{"name":"blue","external_name":"blue","restriction":"::Array(::UInt8)"},{"name":"alpha","external_name":"alpha","restriction":"::Array(::UInt8)"},{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"height","external_name":"height","restriction":"::Int32"}],"args_string":"(red : Array(UInt8), green : Array(UInt8), blue : Array(UInt8), alpha : Array(UInt8), width : Int32, height : Int32)","args_html":"(red : Array(UInt8), green : Array(UInt8), blue : Array(UInt8), alpha : Array(UInt8), width : Int32, height : Int32)","location":{"filename":"src/cr-image/rgba_image.cr","line_number":15,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L15"},"def":{"name":"new","args":[{"name":"red","external_name":"red","restriction":"::Array(::UInt8)"},{"name":"green","external_name":"green","restriction":"::Array(::UInt8)"},{"name":"blue","external_name":"blue","restriction":"::Array(::UInt8)"},{"name":"alpha","external_name":"alpha","restriction":"::Array(::UInt8)"},{"name":"width","external_name":"width","restriction":"::Int32"},{"name":"height","external_name":"height","restriction":"::Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(red, green, blue, alpha, width, height)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](channel_type:ChannelType):Array(UInt8)-instance-method","name":"[]","doc":"Return the channel corresponding to `channel_type`","summary":"<p>Return the channel corresponding to <code>channel_type</code></p>","abstract":false,"args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"}],"args_string":"(channel_type : ChannelType) : Array(UInt8)","args_html":"(channel_type : <a href=\"../CrImage/ChannelType.html\">ChannelType</a>) : Array(UInt8)","location":{"filename":"src/cr-image/rgba_image.cr","line_number":40,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L40"},"def":{"name":"[]","args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"}],"return_type":"Array(UInt8)","visibility":"Public","body":"case channel_type\nwhen ChannelType::Red\n  @red\nwhen ChannelType::Green\n  @green\nwhen ChannelType::Blue\n  @blue\nwhen ChannelType::Alpha\n  @alpha\nelse\n  raise(\"Unknown channel type #{channel_type} for RGBAImage\")\nend"}},{"html_id":"[]=(channel_type:ChannelType,channel:Array(UInt8)):Array(UInt8)-instance-method","name":"[]=","doc":"Set the corresponding `channel_type` with `channel`","summary":"<p>Set the corresponding <code>channel_type</code> with <code>channel</code></p>","abstract":false,"args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"},{"name":"channel","external_name":"channel","restriction":"Array(UInt8)"}],"args_string":"(channel_type : ChannelType, channel : Array(UInt8)) : Array(UInt8)","args_html":"(channel_type : <a href=\"../CrImage/ChannelType.html\">ChannelType</a>, channel : Array(UInt8)) : Array(UInt8)","location":{"filename":"src/cr-image/rgba_image.cr","line_number":51,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L51"},"def":{"name":"[]=","args":[{"name":"channel_type","external_name":"channel_type","restriction":"ChannelType"},{"name":"channel","external_name":"channel","restriction":"Array(UInt8)"}],"return_type":"Array(UInt8)","visibility":"Public","body":"case channel_type\nwhen ChannelType::Red\n  @red = channel\nwhen ChannelType::Green\n  @green = channel\nwhen ChannelType::Blue\n  @blue = channel\nwhen ChannelType::Alpha\n  @alpha = channel\nelse\n  raise(\"Unknown channel type #{channel_type} for RGBAImage\")\nend"}},{"html_id":"alpha:Array(UInt8)-instance-method","name":"alpha","doc":"Return the alpha channel","summary":"<p>Return the alpha channel</p>","abstract":false,"location":{"filename":"src/cr-image/rgba_image.cr","line_number":11,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L11"},"def":{"name":"alpha","return_type":"Array(UInt8)","visibility":"Public","body":"@alpha"}},{"html_id":"alpha=(alpha:Array(UInt8))-instance-method","name":"alpha=","abstract":false,"args":[{"name":"alpha","external_name":"alpha","restriction":"Array(UInt8)"}],"args_string":"(alpha : Array(UInt8))","args_html":"(alpha : Array(UInt8))","location":{"filename":"src/cr-image/rgba_image.cr","line_number":11,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L11"},"def":{"name":"alpha=","args":[{"name":"alpha","external_name":"alpha","restriction":"Array(UInt8)"}],"visibility":"Public","body":"@alpha = alpha"}},{"html_id":"blue:Array(UInt8)-instance-method","name":"blue","doc":"Return the blue channel","summary":"<p>Return the blue channel</p>","abstract":false,"location":{"filename":"src/cr-image/rgba_image.cr","line_number":10,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L10"},"def":{"name":"blue","return_type":"Array(UInt8)","visibility":"Public","body":"@blue"}},{"html_id":"blue=(blue:Array(UInt8))-instance-method","name":"blue=","abstract":false,"args":[{"name":"blue","external_name":"blue","restriction":"Array(UInt8)"}],"args_string":"(blue : Array(UInt8))","args_html":"(blue : Array(UInt8))","location":{"filename":"src/cr-image/rgba_image.cr","line_number":10,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L10"},"def":{"name":"blue=","args":[{"name":"blue","external_name":"blue","restriction":"Array(UInt8)"}],"visibility":"Public","body":"@blue = blue"}},{"html_id":"clone:RGBAImage-instance-method","name":"clone","doc":"Create a copy of this image","summary":"<p>Create a copy of this image</p>","abstract":false,"location":{"filename":"src/cr-image/rgba_image.cr","line_number":19,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L19"},"def":{"name":"clone","return_type":"RGBAImage","visibility":"Public","body":"self.class.new(@red.clone, @green.clone, @blue.clone, @alpha.clone, @width, @height)"}},{"html_id":"each_channel(&:Array(UInt8),ChannelType->Nil):Nil-instance-method","name":"each_channel","doc":"Run provided block with the `ChannelType::Red`, `ChannelType::Green`, `ChannelType::Blue`, and `ChannelType::Alpha` channels.","summary":"<p>Run provided block with the <code><a href=\"../CrImage/ChannelType.html#Red\">ChannelType::Red</a></code>, <code><a href=\"../CrImage/ChannelType.html#Green\">ChannelType::Green</a></code>, <code><a href=\"../CrImage/ChannelType.html#Blue\">ChannelType::Blue</a></code>, and <code><a href=\"../CrImage/ChannelType.html#Alpha\">ChannelType::Alpha</a></code> channels.</p>","abstract":false,"location":{"filename":"src/cr-image/rgba_image.cr","line_number":31,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L31"},"def":{"name":"each_channel","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Array(UInt8), ChannelType -> Nil)"},"return_type":"Nil","visibility":"Public","body":"yield @red, ChannelType::Red\nyield @green, ChannelType::Green\nyield @blue, ChannelType::Blue\nyield @alpha, ChannelType::Alpha\nnil\n"}},{"html_id":"green:Array(UInt8)-instance-method","name":"green","doc":"Return the green channel","summary":"<p>Return the green channel</p>","abstract":false,"location":{"filename":"src/cr-image/rgba_image.cr","line_number":9,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L9"},"def":{"name":"green","return_type":"Array(UInt8)","visibility":"Public","body":"@green"}},{"html_id":"green=(green:Array(UInt8))-instance-method","name":"green=","abstract":false,"args":[{"name":"green","external_name":"green","restriction":"Array(UInt8)"}],"args_string":"(green : Array(UInt8))","args_html":"(green : Array(UInt8))","location":{"filename":"src/cr-image/rgba_image.cr","line_number":9,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L9"},"def":{"name":"green=","args":[{"name":"green","external_name":"green","restriction":"Array(UInt8)"}],"visibility":"Public","body":"@green = green"}},{"html_id":"height:Int32-instance-method","name":"height","doc":"Height of image","summary":"<p>Height of image</p>","abstract":false,"location":{"filename":"src/cr-image/rgba_image.cr","line_number":13,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L13"},"def":{"name":"height","return_type":"Int32","visibility":"Public","body":"@height"}},{"html_id":"height=(height:Int32)-instance-method","name":"height=","abstract":false,"args":[{"name":"height","external_name":"height","restriction":"Int32"}],"args_string":"(height : Int32)","args_html":"(height : Int32)","location":{"filename":"src/cr-image/rgba_image.cr","line_number":13,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L13"},"def":{"name":"height=","args":[{"name":"height","external_name":"height","restriction":"Int32"}],"visibility":"Public","body":"@height = height"}},{"html_id":"red:Array(UInt8)-instance-method","name":"red","doc":"Return the red channel","summary":"<p>Return the red channel</p>","abstract":false,"location":{"filename":"src/cr-image/rgba_image.cr","line_number":8,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L8"},"def":{"name":"red","return_type":"Array(UInt8)","visibility":"Public","body":"@red"}},{"html_id":"red=(red:Array(UInt8))-instance-method","name":"red=","abstract":false,"args":[{"name":"red","external_name":"red","restriction":"Array(UInt8)"}],"args_string":"(red : Array(UInt8))","args_html":"(red : Array(UInt8))","location":{"filename":"src/cr-image/rgba_image.cr","line_number":8,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L8"},"def":{"name":"red=","args":[{"name":"red","external_name":"red","restriction":"Array(UInt8)"}],"visibility":"Public","body":"@red = red"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Return the number of pixels in this image","summary":"<p>Return the number of pixels in this image</p>","abstract":false,"location":{"filename":"src/cr-image/rgba_image.cr","line_number":79,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L79"},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@width * @height"}},{"html_id":"to_gray(red_multiplier:Float=0.299,green_multiplier:Float=0.587,blue_multiplier:Float=0.114):GrayscaleImage-instance-method","name":"to_gray","doc":"Convert color image to `GrayscaleImage`, using the NTSC formula as default values.\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/sample.jpg\" alt=\"Woman with black turtleneck and white background\"/>\n\nBecomes\n\n<img src=\"https://raw.githubusercontent.com/Vici37/cr-image/master/docs/images/gray_sample.jpg\" alt=\"Woman in black turtleneck on white background in grayscale\"/>","summary":"<p>Convert color image to <code><a href=\"../CrImage/GrayscaleImage.html\">GrayscaleImage</a></code>, using the NTSC formula as default values.</p>","abstract":false,"args":[{"name":"red_multiplier","default_value":"0.299","external_name":"red_multiplier","restriction":"Float"},{"name":"green_multiplier","default_value":"0.587","external_name":"green_multiplier","restriction":"Float"},{"name":"blue_multiplier","default_value":"0.114","external_name":"blue_multiplier","restriction":"Float"}],"args_string":"(red_multiplier : Float = 0.299, green_multiplier : Float = 0.587, blue_multiplier : Float = 0.114) : GrayscaleImage","args_html":"(red_multiplier : Float = <span class=\"n\">0.299</span>, green_multiplier : Float = <span class=\"n\">0.587</span>, blue_multiplier : Float = <span class=\"n\">0.114</span>) : <a href=\"../CrImage/GrayscaleImage.html\">GrayscaleImage</a>","location":{"filename":"src/cr-image/rgba_image.cr","line_number":68,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L68"},"def":{"name":"to_gray","args":[{"name":"red_multiplier","default_value":"0.299","external_name":"red_multiplier","restriction":"Float"},{"name":"green_multiplier","default_value":"0.587","external_name":"green_multiplier","restriction":"Float"},{"name":"blue_multiplier","default_value":"0.114","external_name":"blue_multiplier","restriction":"Float"}],"return_type":"GrayscaleImage","visibility":"Public","body":"GrayscaleImage.new(red.map_with_index do |red_pix, i|\n  (Math.min(255, ((red_pix * red_multiplier) + (@green[i] * green_multiplier)) + (@blue[i] * blue_multiplier))).to_u8\nend, width, height)"}},{"html_id":"width:Int32-instance-method","name":"width","doc":"Width of image","summary":"<p>Width of image</p>","abstract":false,"location":{"filename":"src/cr-image/rgba_image.cr","line_number":12,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L12"},"def":{"name":"width","return_type":"Int32","visibility":"Public","body":"@width"}},{"html_id":"width=(width:Int32)-instance-method","name":"width=","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"}],"args_string":"(width : Int32)","args_html":"(width : Int32)","location":{"filename":"src/cr-image/rgba_image.cr","line_number":12,"url":"https://github.com/Vici37/cr-image/blob/f1049fa589a84b7be527e4e21af862fa5f5b23dc/src/cr-image/rgba_image.cr#L12"},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"Int32"}],"visibility":"Public","body":"@width = width"}}]}]}]}}